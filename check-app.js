#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ–¥–∏—á–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É...\n');

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
const requiredFiles = [
  'package.json',
  'index.html',
  'vite.config.ts',
  'src/main.tsx',
  'src/App.tsx',
  'public/data/screenings.json',
  'public/data/hospitals.json'
];

console.log('üìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤:');
requiredFiles.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${file}`);
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
const componentDirs = [
  'src/components/atoms/Button',
  'src/components/atoms/Input',
  'src/components/atoms/Toast',
  'src/components/molecules/ScreeningCard',
  'src/components/molecules/BookmarkButton',
  'src/components/molecules/ExportButton',
  'src/components/organisms/ScreeningFilters',
  'src/components/organisms/HospitalMap',
  'src/components/organisms/ToastContainer'
];

console.log('\nüß© –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤:');
componentDirs.forEach(dir => {
  const exists = fs.existsSync(dir);
  const hasTs = fs.existsSync(path.join(dir, path.basename(dir) + '.tsx'));
  const hasScss = fs.existsSync(path.join(dir, path.basename(dir) + '.module.scss'));
  
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${dir}`);
  if (exists) {
    console.log(`  ${hasTs ? '‚úÖ' : '‚ùå'} TypeScript —Ñ–∞–π–ª`);
    console.log(`  ${hasScss ? '‚úÖ' : '‚ùå'} SCSS —Å—Ç–∏–ª—ñ`);
  }
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ package.json –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
console.log('\nüì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—é—á–æ–≤–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π:');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
  
  const requiredDeps = [
    'react',
    'react-dom',
    'react-router-dom',
    'typescript',
    'vite',
    '@vitejs/plugin-react',
    'leaflet',
    'react-leaflet'
  ];
  
  requiredDeps.forEach(dep => {
    const exists = deps[dep];
    console.log(`${exists ? '‚úÖ' : '‚ùå'} ${dep}${exists ? ` (${exists})` : ''}`);
  });
} catch (e) {
  console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è package.json');
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
console.log('\nüìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö:');
try {
  const screenings = JSON.parse(fs.readFileSync('public/data/screenings.json', 'utf8'));
  const hospitals = JSON.parse(fs.readFileSync('public/data/hospitals.json', 'utf8'));
  
  console.log(`‚úÖ –°–∫—Ä–∏–Ω—ñ–Ω–≥–∏: ${screenings.length} –ø—Ä–æ–≥—Ä–∞–º`);
  console.log(`‚úÖ –õ—ñ–∫–∞—Ä–Ω—ñ: ${hospitals.length} –∑–∞–∫–ª–∞–¥—ñ–≤`);
} catch (e) {
  console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–∞–Ω–∏—Ö');
}

console.log('\nüéâ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log('\nüí° –î–ª—è –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ:');
console.log('   npm run dev');
console.log('\nüåê –î–æ–¥–∞—Ç–æ–∫ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞: http://localhost:5173'); 