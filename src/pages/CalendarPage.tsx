import React, { useState, useEffect } from 'react';
import { useUser } from '@/context/UserContext';
import { useScreening } from '@/context/ScreeningContext';
import { HealthCalendar } from '@/components/organisms/HealthCalendar/HealthCalendar';
import { ScreeningHistory } from '@/components/organisms/ScreeningHistory/ScreeningHistory';
import { HealthStatistics } from '@/components/organisms/HealthStatistics/HealthStatistics';
import { ReminderSettings } from '@/components/organisms/ReminderSettings/ReminderSettings';
import { Button } from '@/components/atoms/Button/Button';
import AdBanner from '@/components/atoms/AdBanner/AdBanner';
import { useToast } from '@/hooks/useToast';
import styles from './CalendarPage.module.scss';

interface ReminderSettings {
  enableEmailReminders: boolean;
  enablePushNotifications: boolean;
  reminderDaysBefore: number[];
  reminderTime: string;
  emailAddress: string;
  autoScheduleRecommendations: boolean;
  urgentRemindersOnly: boolean;
}

export const CalendarPage: React.FC = () => {
  const { state: userState, addCheckup, markScreeningCompleted } = useUser();
  const { state: screeningState } = useScreening();
  const [activeTab, setActiveTab] = useState<'calendar' | 'history' | 'statistics' | 'reminders'>('calendar');
  const { success, info } = useToast();

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω
  useEffect(() => {
    if (!userState.profile) {
      info('–°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–∫—Ä–∏–Ω—ñ–Ω–≥—ñ–≤');
      window.location.href = '/profile';
    }
  }, [userState.profile, info]);

  if (!userState.profile) {
    return (
      <div className={styles.noProfile}>
        <div className={styles.noProfileContent}>
          <h2>üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä —Å–∫—Ä–∏–Ω—ñ–Ω–≥—ñ–≤</h2>
          <p>–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å</p>
          <Button
            variant="primary"
            onClick={() => window.location.href = '/profile'}
          >
            –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å
          </Button>
        </div>
      </div>
    );
  }

  const handleMarkCompleted = (screeningId: string, date: string, result?: '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π' | '–ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏' | '–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è', notes?: string) => {
    markScreeningCompleted(screeningId, date, notes);
    if (result) {
      addCheckup(screeningId, date, result, notes);
    }
    success('–°–∫—Ä–∏–Ω—ñ–Ω–≥ –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π!');
  };

  const tabs = [
    { id: 'calendar', label: 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä', icon: 'üìÖ' },
    { id: 'history', label: 'üìã –Ü—Å—Ç–æ—Ä—ñ—è', icon: 'üìã' },
    { id: 'statistics', label: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', icon: 'üìä' },
    { id: 'reminders', label: 'üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', icon: 'üîî' }
  ] as const;

  const upcomingCount = userState.recommendations.filter(r => 
    new Date(r.nextRecommendedDate) > new Date()
  ).length;

  const overdueCount = userState.recommendations.filter(r => r.isOverdue).length;

  const completedThisMonth = userState.profile.medicalHistory.lastCheckups.filter(checkup => {
    const checkupDate = new Date(checkup.date);
    const now = new Date();
    return checkupDate.getMonth() === now.getMonth() && 
           checkupDate.getFullYear() === now.getFullYear();
  }).length;

  return (
    <div className={styles.calendarPage}>
      <div className={styles.header}>
        <div className={styles.headerContent}>
          <h1>üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä —Å–∫—Ä–∏–Ω—ñ–Ω–≥—ñ–≤</h1>
          <p>–ü–ª–∞–Ω—É–π—Ç–µ —Ç–∞ –≤—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ –≤–∞—à—ñ –º–µ–¥–∏—á–Ω—ñ –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è</p>
        </div>
        
        <div className={styles.quickStats}>
          <div className={styles.statCard}>
            <span className={styles.statNumber}>{upcomingCount}</span>
            <span className={styles.statLabel}>–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ</span>
          </div>
          <div className={`${styles.statCard} ${overdueCount > 0 ? styles.warning : ''}`}>
            <span className={styles.statNumber}>{overdueCount}</span>
            <span className={styles.statLabel}>–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ</span>
          </div>
          <div className={styles.statCard}>
            <span className={styles.statNumber}>{completedThisMonth}</span>
            <span className={styles.statLabel}>–¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è</span>
          </div>
        </div>
      </div>

      {/* –ë–∞–Ω–µ—Ä –ø—ñ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º */}
      <AdBanner size="leaderboard" position="top" />

      <div className={styles.tabNavigation}>
        {tabs.map(tab => (
          <button
            key={tab.id}
            onClick={() => setActiveTab(tab.id)}
            className={`${styles.tabButton} ${activeTab === tab.id ? styles.active : ''}`}
          >
            <span className={styles.tabIcon}>{tab.icon}</span>
            <span className={styles.tabLabel}>{tab.label}</span>
            {tab.id === 'calendar' && overdueCount > 0 && (
              <span className={styles.badge}>{overdueCount}</span>
            )}
          </button>
        ))}
      </div>

      <div className={styles.tabContent}>
        {activeTab === 'calendar' && (
          <>
            <HealthCalendar
              recommendations={userState.recommendations}
              calendarEvents={userState.calendarEvents}
              onMarkCompleted={handleMarkCompleted}
            />
            {/* –ù–∞—Ç–∏–≤–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ */}
            <div className={styles.adSection}>
              <AdBanner size="native" />
            </div>
          </>
        )}

        {activeTab === 'history' && (
          <>
            <ScreeningHistory
              profile={userState.profile}
              screenings={screeningState.screenings}
              onAddCheckup={addCheckup}
            />
            {/* –ü—Ä—è–º–æ–∫—É—Ç–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó */}
            <div className={styles.adSection}>
              <AdBanner size="rectangle" />
            </div>
          </>
        )}

        {activeTab === 'statistics' && (
          <>
            <HealthStatistics
              profile={userState.profile}
              recommendations={userState.recommendations}
              screenings={screeningState.screenings}
            />
            {/* –ú–æ–±—ñ–ª—å–Ω–∏–π –±–∞–Ω–µ—Ä –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ */}
            <div className={styles.adSection}>
              <AdBanner size="banner" />
            </div>
          </>
        )}

        {activeTab === 'reminders' && (
          <ReminderSettings
            profile={userState.profile}
            onUpdateSettings={(_settings: ReminderSettings) => {
              // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ
              userState.profile && addCheckup(
                'settings-update', 
                new Date().toISOString().split('T')[0], 
                '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π',
                '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –æ–Ω–æ–≤–ª–µ–Ω–æ'
              );
            }}
          />
        )}
      </div>
    </div>
  );
}; 