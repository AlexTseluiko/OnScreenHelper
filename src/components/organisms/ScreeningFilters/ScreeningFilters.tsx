import React, { useState, useCallback, useEffect } from 'react';
import { useScreening } from '@/context/ScreeningContext';
import { ScreeningCategory, Gender } from '@/types/screening';
import { Input } from '@/components/atoms/Input/Input';
import { Button } from '@/components/atoms/Button/Button';
import styles from './ScreeningFilters.module.scss';

const categories: ScreeningCategory[] = [
  '–û–Ω–∫–æ–ª–æ–≥—ñ—è',
  '–ö–∞—Ä–¥—ñ–æ–ª–æ–≥—ñ—è', 
  '–ï–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥—ñ—è',
  '–ù–µ–≤—Ä–æ–ª–æ–≥—ñ—è',
  '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥—ñ—è',
  '–ì—ñ–Ω–µ–∫–æ–ª–æ–≥—ñ—è',
  '–£—Ä–æ–ª–æ–≥—ñ—è',
  '–ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥—ñ—è',
  '–ì–∞—Å—Ç—Ä–æ–µ–Ω—Ç–µ—Ä–æ–ª–æ–≥—ñ—è',
  '–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥—ñ—è',
  '–û—Ä—Ç–æ–ø–µ–¥—ñ—è',
  '–ü—Å–∏—Ö—ñ–∞—Ç—Ä—ñ—è',
  '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥—ñ—è',
  '–õ–û–†',
  '–†–µ–≤–º–∞—Ç–æ–ª–æ–≥—ñ—è',
  '–ù–µ—Ñ—Ä–æ–ª–æ–≥—ñ—è',
  '–ì–µ–º–∞—Ç–æ–ª–æ–≥—ñ—è',
  '–Ü–º—É–Ω–æ–ª–æ–≥—ñ—è'
];

const getCategoryIcon = (category: ScreeningCategory) => {
  const icons: Record<ScreeningCategory, string> = {
    '–û–Ω–∫–æ–ª–æ–≥—ñ—è': 'üéóÔ∏è',
    '–ö–∞—Ä–¥—ñ–æ–ª–æ–≥—ñ—è': '‚ù§Ô∏è',
    '–ï–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥—ñ—è': 'üß¨',
    '–ù–µ–≤—Ä–æ–ª–æ–≥—ñ—è': 'üß†',
    '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥—ñ—è': 'üëÅÔ∏è',
    '–ì—ñ–Ω–µ–∫–æ–ª–æ–≥—ñ—è': 'üå∏',
    '–£—Ä–æ–ª–æ–≥—ñ—è': 'üîµ',
    '–ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥—ñ—è': 'üî¥',
    '–ì–∞—Å—Ç—Ä–æ–µ–Ω—Ç–µ—Ä–æ–ª–æ–≥—ñ—è': 'üü†',
    '–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥—ñ—è': 'üß¥',
    '–û—Ä—Ç–æ–ø–µ–¥—ñ—è': 'ü¶¥',
    '–ü—Å–∏—Ö—ñ–∞—Ç—Ä—ñ—è': 'üßò',
    '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥—ñ—è': 'ü¶∑',
    '–õ–û–†': 'üëÇ',
    '–†–µ–≤–º–∞—Ç–æ–ª–æ–≥—ñ—è': 'ü§≤',
    '–ù–µ—Ñ—Ä–æ–ª–æ–≥—ñ—è': 'üî∂',
    '–ì–µ–º–∞—Ç–æ–ª–æ–≥—ñ—è': 'ü©∏',
    '–Ü–º—É–Ω–æ–ª–æ–≥—ñ—è': 'üõ°Ô∏è'
  };
  return icons[category];
};

export const ScreeningFilters: React.FC = () => {
  const { state, setFilters } = useScreening();
  const [tempAge, setTempAge] = useState(state.filters.ageRange);
  const [isExpanded, setIsExpanded] = useState(true);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–º—ñ–Ω–∏ –≤—ñ–∫—É —á–µ—Ä–µ–∑ 500–º—Å –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–º—ñ–Ω–∏
  useEffect(() => {
    const timer = setTimeout(() => {
      if (tempAge[0] !== state.filters.ageRange[0] || tempAge[1] !== state.filters.ageRange[1]) {
        setFilters({ ageRange: tempAge });
      }
    }, 500);

    return () => clearTimeout(timer);
  }, [tempAge, state.filters.ageRange, setFilters]);

  const handleCategoryToggle = useCallback((category: ScreeningCategory) => {
    const newCategories = state.filters.categories.includes(category)
      ? state.filters.categories.filter(c => c !== category)
      : [...state.filters.categories, category];
    
    setFilters({ categories: newCategories });
  }, [state.filters.categories, setFilters]);

  const handleGenderChange = useCallback((gender: Gender | '–≤—Å—ñ') => {
    setFilters({ gender });
  }, [setFilters]);

  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setFilters({ searchQuery: e.target.value });
  }, [setFilters]);

  const handleAgeRangeChange = useCallback((index: number, value: string) => {
    const numValue = Math.max(18, Math.min(80, parseInt(value) || 18));
    const newRange: [number, number] = [...tempAge];
    newRange[index] = numValue;
    
    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –±—ñ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
    if (index === 0 && numValue > newRange[1]) {
      newRange[1] = numValue;
    } else if (index === 1 && numValue < newRange[0]) {
      newRange[0] = numValue;
    }
    
    setTempAge(newRange);
  }, [tempAge]);

  const applyAgeFilter = useCallback(() => {
    setFilters({ ageRange: tempAge });
  }, [tempAge, setFilters]);

  const clearAllFilters = useCallback(() => {
    setFilters({
      categories: [],
      ageRange: [18, 80],
      gender: '–≤—Å—ñ',
      searchQuery: ''
    });
    setTempAge([18, 80]);
  }, [setFilters]);

  const hasActiveFilters = 
    state.filters.categories.length > 0 ||
    state.filters.gender !== '–≤—Å—ñ' ||
    state.filters.searchQuery !== '' ||
    state.filters.ageRange[0] !== 18 ||
    state.filters.ageRange[1] !== 80;

  return (
    <div className={styles.filters}>
      <div className={styles.header}>
        <h2 className={styles.title}>
          üîç –§—ñ–ª—å—Ç—Ä–∏
          {hasActiveFilters && (
            <span className={styles.activeCount}>
              ({state.filteredScreenings.length})
            </span>
          )}
        </h2>
        
        <div className={styles.headerActions}>
          {hasActiveFilters && (
            <Button
              variant="ghost"
              size="sm"
              onClick={clearAllFilters}
              className={styles.clearButton}
            >
              –°–∫–∏–Ω—É—Ç–∏
            </Button>
          )}
          
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsExpanded(!isExpanded)}
            className={styles.expandButton}
          >
            {isExpanded ? '‚ñ≤' : '‚ñº'}
          </Button>
        </div>
      </div>

      <div className={`${styles.content} ${isExpanded ? styles.expanded : ''}`}>
        {/* –ü–æ–∏—Å–∫ */}
        <div className={styles.section}>
          <Input
            placeholder="–ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é –∞–±–æ –æ–ø–∏—Å–æ–º..."
            value={state.filters.searchQuery}
            onChange={handleSearchChange}
            leftIcon="üîç"
            variant="filled"
          />
        </div>

        {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <div className={styles.section}>
          <h3 className={styles.sectionTitle}>–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó</h3>
          <div className={styles.categoryGrid}>
            {categories.map(category => (
              <button
                key={category}
                onClick={() => handleCategoryToggle(category)}
                className={`${styles.categoryButton} ${
                  state.filters.categories.includes(category) ? styles.active : ''
                }`}
              >
                <span className={styles.categoryIcon}>
                  {getCategoryIcon(category)}
                </span>
                <span className={styles.categoryName}>{category}</span>
              </button>
            ))}
          </div>
        </div>

        {/* –í–æ–∑—Ä–∞—Å—Ç */}
        <div className={styles.section}>
          <h3 className={styles.sectionTitle}>–í—ñ–∫</h3>
          <div className={styles.ageRange}>
            <div className={styles.ageInputs}>
              <Input
                type="number"
                value={tempAge[0].toString()}
                onChange={(e) => handleAgeRangeChange(0, e.target.value)}
                label="–í—ñ–¥"
                min="18"
                max="80"
                variant="outline"
              />
              <span className={styles.ageSeparator}>‚Äî</span>
              <Input
                type="number"
                value={tempAge[1].toString()}
                onChange={(e) => handleAgeRangeChange(1, e.target.value)}
                label="–î–æ"
                min="18"
                max="80"
                variant="outline"
              />
            </div>
            
            <Button
              variant="ghost"
              size="sm"
              onClick={applyAgeFilter}
              className={styles.applyAgeButton}
              disabled={
                tempAge[0] === state.filters.ageRange[0] &&
                tempAge[1] === state.filters.ageRange[1]
              }
            >
              ‚ö° –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑
            </Button>
          </div>
          
          <div className={styles.ageSlider}>
            <div className={styles.sliderLabels}>
              <span className={styles.sliderLabel}>18</span>
              <span className={styles.sliderValue}>
                {tempAge[0]} - {tempAge[1]} —Ä–æ–∫—ñ–≤
              </span>
              <span className={styles.sliderLabel}>80</span>
            </div>
            <div className={styles.sliderContainer}>
              <input
                type="range"
                min="18"
                max="80"
                value={tempAge[0]}
                onChange={(e) => handleAgeRangeChange(0, e.target.value)}
                className={`${styles.slider} ${styles.sliderMin}`}
              />
              <input
                type="range"
                min="18"
                max="80" 
                value={tempAge[1]}
                onChange={(e) => handleAgeRangeChange(1, e.target.value)}
                className={`${styles.slider} ${styles.sliderMax}`}
              />
            </div>
          </div>
        </div>

        {/* –ü–æ–ª */}
        <div className={styles.section}>
          <h3 className={styles.sectionTitle}>–°—Ç–∞—Ç—å</h3>
          <div className={styles.genderButtons}>
            {(['–≤—Å—ñ', '—á–æ–ª–æ–≤—ñ—á–∏–π', '–∂—ñ–Ω–æ—á–∏–π'] as const).map(gender => (
              <button
                key={gender}
                onClick={() => handleGenderChange(gender)}
                className={`${styles.genderButton} ${
                  state.filters.gender === gender ? styles.active : ''
                }`}
              >
                <span className={styles.genderIcon}>
                  {gender === '—á–æ–ª–æ–≤—ñ—á–∏–π' && '‚ôÇÔ∏è'}
                  {gender === '–∂—ñ–Ω–æ—á–∏–π' && '‚ôÄÔ∏è'}
                  {gender === '–≤—Å—ñ' && '‚ö™'}
                </span>
                <span className={styles.genderText}>
                  {gender === '–≤—Å—ñ' ? '–í—Å—ñ' : gender}
                </span>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}; 