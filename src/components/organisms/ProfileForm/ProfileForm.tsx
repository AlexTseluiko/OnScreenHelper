import React, { useState, useEffect } from 'react';
import { useUser } from '@/context/UserContext';
import { UserProfile, MedicalHistory, FamilyHistory } from '@/types/user';
import { ScreeningCategory } from '@/types/screening';
import { Input } from '@/components/atoms/Input/Input';
import { Button } from '@/components/atoms/Button/Button';
import styles from './ProfileForm.module.scss';

interface ProfileFormProps {
  onComplete?: () => void;
  isEditing?: boolean;
}

const categories: ScreeningCategory[] = [
  '–û–Ω–∫–æ–ª–æ–≥—ñ—è', '–ö–∞—Ä–¥—ñ–æ–ª–æ–≥—ñ—è', '–ï–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥—ñ—è', '–ù–µ–≤—Ä–æ–ª–æ–≥—ñ—è', '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥—ñ—è',
  '–ì—ñ–Ω–µ–∫–æ–ª–æ–≥—ñ—è', '–£—Ä–æ–ª–æ–≥—ñ—è', '–ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥—ñ—è', '–ì–∞—Å—Ç—Ä–æ–µ–Ω—Ç–µ—Ä–æ–ª–æ–≥—ñ—è', '–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥—ñ—è',
  '–û—Ä—Ç–æ–ø–µ–¥—ñ—è', '–ü—Å–∏—Ö—ñ–∞—Ç—Ä—ñ—è', '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥—ñ—è', '–õ–û–†', '–†–µ–≤–º–∞—Ç–æ–ª–æ–≥—ñ—è', '–ù–µ—Ñ—Ä–æ–ª–æ–≥—ñ—è',
  '–ì–µ–º–∞—Ç–æ–ª–æ–≥—ñ—è', '–Ü–º—É–Ω–æ–ª–æ–≥—ñ—è'
];

const relationTypes = ['–º–∞—Ç–∏', '–±–∞—Ç—å–∫–æ', '–±–∞–±—É—Å—è', '–¥—ñ–¥—É—Å—å', '—Å–µ—Å—Ç—Ä–∞', '–±—Ä–∞—Ç', '—ñ–Ω—à–µ'] as const;

const commonDiseases = [
  '–ì—ñ–ø–µ—Ä—Ç–æ–Ω—ñ—è', '–î—ñ–∞–±–µ—Ç', '–†–∞–∫ –º–æ–ª–æ—á–Ω–æ—ó –∑–∞–ª–æ–∑–∏', '–†–∞–∫ –ª–µ–≥–µ–Ω—ñ–≤', '–°–µ—Ä—Ü–µ–≤–æ-—Å—É–¥–∏–Ω–Ω—ñ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è',
  '–Ü–Ω—Å—É–ª—å—Ç', '–Ü–Ω—Ñ–∞—Ä–∫—Ç', '–û—Å—Ç–µ–æ–ø–æ—Ä–æ–∑', '–ê—Å—Ç–º–∞', '–î–µ–ø—Ä–µ—Å—ñ—è', '–û–∂–∏—Ä—ñ–Ω–Ω—è', '–ì—ñ–ø–µ—Ä—Ç–∏—Ä–µ–æ–∑',
  '–ì—ñ–ø–æ—Ç–∏—Ä–µ–æ–∑', '–ê—Ä—Ç—Ä–∏—Ç', '–ú—ñ–≥—Ä–µ–Ω—å', '–ï–ø—ñ–ª–µ–ø—Å—ñ—è', '–ó–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è –Ω–∏—Ä–æ–∫', '–ó–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è –ø–µ—á—ñ–Ω–∫–∏'
];

const commonRiskFactors = [
  '–ö—É—Ä—ñ–Ω–Ω—è', '–ó–ª–æ–≤–∂–∏–≤–∞–Ω–Ω—è –∞–ª–∫–æ–≥–æ–ª–µ–º', '–ú–∞–ª–æ—Ä—É—Ö–ª–∏–≤–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è', '–ù–∞–¥–º—ñ—Ä–Ω–∞ –≤–∞–≥–∞',
  '–°—Ç—Ä–µ—Å', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è', '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ —à–∫—ñ–¥–ª–∏–≤–æ—Å—Ç—ñ', '–ï–∫–æ–ª–æ–≥—ñ—á–Ω—ñ —Ñ–∞–∫—Ç–æ—Ä–∏',
  '–ì–µ–Ω–µ—Ç–∏—á–Ω–∞ —Å—Ö–∏–ª—å–Ω—ñ—Å—Ç—å', '–í—ñ–∫ —Å—Ç–∞—Ä—à–µ 40 —Ä–æ–∫—ñ–≤', '–•—Ä–æ–Ω—ñ—á–Ω—ñ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è'
];

export const ProfileForm: React.FC<ProfileFormProps> = ({ onComplete, isEditing = false }) => {
  const { state, createProfile, updateProfile } = useUser();
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState<Omit<UserProfile, 'id' | 'createdAt' | 'updatedAt'>>({
    name: '',
    dateOfBirth: '',
    gender: '—á–æ–ª–æ–≤—ñ—á–∏–π',
    email: '',
    phone: '',
    medicalHistory: {
      chronicDiseases: [],
      allergies: [],
      medications: [],
      familyHistory: [],
      riskFactors: [],
      lastCheckups: [],
      healthMetrics: {},
    },
    preferences: {
      preferredCategories: [],
      reminderSettings: {
        enabled: true,
        beforeDays: 7,
        timeOfDay: '09:00',
        email: false,
        push: true,
      },
      privacySettings: {
        shareDataForResearch: false,
        allowAnalytics: true,
        showInPublicStats: false,
      },
      language: 'uk',
      theme: 'light',
    },
  });

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ
  useEffect(() => {
    if (isEditing && state.profile) {
      setFormData({
        name: state.profile.name,
        dateOfBirth: state.profile.dateOfBirth,
        gender: state.profile.gender,
        email: state.profile.email || '',
        phone: state.profile.phone || '',
        medicalHistory: state.profile.medicalHistory,
        preferences: state.profile.preferences,
      });
    }
  }, [isEditing, state.profile]);

  const totalSteps = 4;

  const handleInputChange = (field: string, value: any, section?: string) => {
    if (section) {
      setFormData(prev => {
        const sectionData = prev[section as keyof typeof prev];
        if (typeof sectionData === 'object' && sectionData !== null) {
          return {
            ...prev,
            [section]: {
              ...(sectionData as Record<string, any>),
              [field]: value,
            },
          };
        }
        return prev;
      });
    } else {
      setFormData(prev => ({
        ...prev,
        [field]: value,
      }));
    }
  };

  const handleArrayFieldChange = (section: keyof MedicalHistory, value: string, action: 'add' | 'remove') => {
    const currentArray = formData.medicalHistory[section] as string[];
    let newArray: string[];

    if (action === 'add' && value.trim() && !currentArray.includes(value)) {
      newArray = [...currentArray, value];
    } else if (action === 'remove') {
      newArray = currentArray.filter(item => item !== value);
    } else {
      return;
    }

    setFormData(prev => ({
      ...prev,
      medicalHistory: {
        ...prev.medicalHistory,
        [section]: newArray,
      },
    }));
  };

  const handleFamilyHistoryChange = (index: number, field: keyof FamilyHistory, value: any) => {
    const newFamilyHistory = [...formData.medicalHistory.familyHistory];
    if (newFamilyHistory[index]) {
      newFamilyHistory[index] = {
        ...newFamilyHistory[index],
        [field]: value,
      };
    }
    setFormData(prev => ({
      ...prev,
      medicalHistory: {
        ...prev.medicalHistory,
        familyHistory: newFamilyHistory,
      },
    }));
  };

  const addFamilyHistory = () => {
    setFormData(prev => ({
      ...prev,
      medicalHistory: {
        ...prev.medicalHistory,
        familyHistory: [
          ...prev.medicalHistory.familyHistory,
          { relation: '–º–∞—Ç–∏', diseases: [] },
        ],
      },
    }));
  };

  const removeFamilyHistory = (index: number) => {
    setFormData(prev => ({
      ...prev,
      medicalHistory: {
        ...prev.medicalHistory,
        familyHistory: prev.medicalHistory.familyHistory.filter((_, i) => i !== index),
      },
    }));
  };

  const handleCategoryToggle = (category: ScreeningCategory) => {
    const currentCategories = formData.preferences.preferredCategories;
    const newCategories = currentCategories.includes(category)
      ? currentCategories.filter(c => c !== category)
      : [...currentCategories, category];
    
    setFormData(prev => ({
      ...prev,
      preferences: {
        ...prev.preferences,
        preferredCategories: newCategories,
      },
    }));
  };

  const nextStep = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (isEditing) {
      updateProfile(formData);
    } else {
      createProfile(formData);
    }
    
    onComplete?.();
  };

  const isStepValid = () => {
    switch (currentStep) {
      case 1:
        return formData.name.trim() && formData.dateOfBirth && formData.gender;
      case 2:
      case 3:
      case 4:
        return true;
      default:
        return false;
    }
  };

  return (
    <div className={styles.profileForm}>
      <div className={styles.header}>
        <h2>
          {isEditing ? '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é' : 'üë§ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é'}
        </h2>
        <p>–ö—Ä–æ–∫ {currentStep} –∑ {totalSteps}</p>
      </div>

      <div className={styles.progressBar}>
        <div 
          className={styles.progress} 
          style={{ width: `${(currentStep / totalSteps) * 100}%` }}
        />
      </div>

      <form onSubmit={handleSubmit} className={styles.form}>
        {/* –ö—Ä–æ–∫ 1: –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
        {currentStep === 1 && (
          <div className={styles.step}>
            <h3>üìã –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
            
            <Input
              label="–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ"
              value={formData.name}
              onChange={(e) => handleInputChange('name', e.target.value)}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è"
              required
            />

            <Input
              type="date"
              label="–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"
              value={formData.dateOfBirth}
              onChange={(e) => handleInputChange('dateOfBirth', e.target.value)}
              required
            />

            <div className={styles.genderSection}>
              <label className={styles.label}>–°—Ç–∞—Ç—å</label>
              <div className={styles.genderButtons}>
                {(['—á–æ–ª–æ–≤—ñ—á–∏–π', '–∂—ñ–Ω–æ—á–∏–π'] as const).map(gender => (
                  <button
                    key={gender}
                    type="button"
                    onClick={() => handleInputChange('gender', gender)}
                    className={`${styles.genderButton} ${
                      formData.gender === gender ? styles.active : ''
                    }`}
                  >
                    {gender === '—á–æ–ª–æ–≤—ñ—á–∏–π' ? '‚ôÇÔ∏è –ß–æ–ª–æ–≤—ñ—á–∏–π' : '‚ôÄÔ∏è –ñ—ñ–Ω–æ—á–∏–π'}
                  </button>
                ))}
              </div>
            </div>

            <Input
              type="email"
              label="Email (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
              value={formData.email}
              onChange={(e) => handleInputChange('email', e.target.value)}
              placeholder="your.email@example.com"
            />

            <Input
              type="tel"
              label="–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
              value={formData.phone}
              onChange={(e) => handleInputChange('phone', e.target.value)}
              placeholder="+380 XX XXX XXXX"
            />
          </div>
        )}

        {/* –ö—Ä–æ–∫ 2: –ú–µ–¥–∏—á–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è */}
        {currentStep === 2 && (
          <div className={styles.step}>
            <h3>üè• –ú–µ–¥–∏—á–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è</h3>

            <div className={styles.section}>
              <h4>–•—Ä–æ–Ω—ñ—á–Ω—ñ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è</h4>
              <div className={styles.tagInput}>
                <div className={styles.suggestions}>
                  {commonDiseases.map(disease => (
                    <button
                      key={disease}
                      type="button"
                      onClick={() => handleArrayFieldChange('chronicDiseases', disease, 'add')}
                      className={`${styles.suggestionTag} ${
                        formData.medicalHistory.chronicDiseases.includes(disease) ? styles.selected : ''
                      }`}
                    >
                      {disease}
                    </button>
                  ))}
                </div>
                <div className={styles.selectedTags}>
                  {formData.medicalHistory.chronicDiseases.map(disease => (
                    <span key={disease} className={styles.selectedTag}>
                      {disease}
                      <button
                        type="button"
                        onClick={() => handleArrayFieldChange('chronicDiseases', disease, 'remove')}
                        className={styles.removeTag}
                      >
                        ‚úï
                      </button>
                    </span>
                  ))}
                </div>
              </div>
            </div>

            <div className={styles.section}>
              <h4>–§–∞–∫—Ç–æ—Ä–∏ —Ä–∏–∑–∏–∫—É</h4>
              <div className={styles.tagInput}>
                <div className={styles.suggestions}>
                  {commonRiskFactors.map(factor => (
                    <button
                      key={factor}
                      type="button"
                      onClick={() => handleArrayFieldChange('riskFactors', factor, 'add')}
                      className={`${styles.suggestionTag} ${
                        formData.medicalHistory.riskFactors.includes(factor) ? styles.selected : ''
                      }`}
                    >
                      {factor}
                    </button>
                  ))}
                </div>
                <div className={styles.selectedTags}>
                  {formData.medicalHistory.riskFactors.map(factor => (
                    <span key={factor} className={styles.selectedTag}>
                      {factor}
                      <button
                        type="button"
                        onClick={() => handleArrayFieldChange('riskFactors', factor, 'remove')}
                        className={styles.removeTag}
                      >
                        ‚úï
                      </button>
                    </span>
                  ))}
                </div>
              </div>
            </div>

            <div className={styles.section}>
              <h4>–ê–ª–µ—Ä–≥—ñ—ó —Ç–∞ –ª—ñ–∫–∞—Ä—Å—å–∫—ñ –∑–∞—Å–æ–±–∏</h4>
              <Input
                label="–ê–ª–µ—Ä–≥—ñ—ó (—á–µ—Ä–µ–∑ –∫–æ–º—É)"
                value={formData.medicalHistory.allergies.join(', ')}
                onChange={(e) => handleInputChange('allergies', e.target.value.split(',').map(s => s.trim()).filter(Boolean), 'medicalHistory')}
                placeholder="–ü–µ–Ω—ñ—Ü–∏–ª—ñ–Ω, –º–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏..."
              />
              
              <Input
                label="–ü–æ—Ç–æ—á–Ω—ñ –ª—ñ–∫–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É)"
                value={formData.medicalHistory.medications.join(', ')}
                onChange={(e) => handleInputChange('medications', e.target.value.split(',').map(s => s.trim()).filter(Boolean), 'medicalHistory')}
                placeholder="–ê—Å–ø—ñ—Ä–∏–Ω, –ú–µ—Ç—Ñ–æ—Ä–º—ñ–Ω..."
              />
            </div>
          </div>
        )}

        {/* –ö—Ä–æ–∫ 3: –°—ñ–º–µ–π–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è */}
        {currentStep === 3 && (
          <div className={styles.step}>
            <h3>üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°—ñ–º–µ–π–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è</h3>
            
            <div className={styles.familyHistory}>
              {formData.medicalHistory.familyHistory.map((family, index) => (
                <div key={index} className={styles.familyMember}>
                  <div className={styles.familyHeader}>
                    <select
                      value={family.relation}
                      onChange={(e) => handleFamilyHistoryChange(index, 'relation', e.target.value)}
                      className={styles.relationSelect}
                    >
                      {relationTypes.map(relation => (
                        <option key={relation} value={relation}>
                          {relation}
                        </option>
                      ))}
                    </select>
                    
                    <button
                      type="button"
                      onClick={() => removeFamilyHistory(index)}
                      className={styles.removeFamilyButton}
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                  
                  <div className={styles.diseaseSelection}>
                    {commonDiseases.map(disease => (
                      <button
                        key={disease}
                        type="button"
                        onClick={() => {
                          const currentDiseases = family.diseases;
                          const newDiseases = currentDiseases.includes(disease)
                            ? currentDiseases.filter(d => d !== disease)
                            : [...currentDiseases, disease];
                          handleFamilyHistoryChange(index, 'diseases', newDiseases);
                        }}
                        className={`${styles.diseaseTag} ${
                          family.diseases.includes(disease) ? styles.selected : ''
                        }`}
                      >
                        {disease}
                      </button>
                    ))}
                  </div>
                </div>
              ))}
              
              <button
                type="button"
                onClick={addFamilyHistory}
                className={styles.addFamilyButton}
              >
                ‚ûï –î–æ–¥–∞—Ç–∏ —á–ª–µ–Ω–∞ —Å—ñ–º'—ó
              </button>
            </div>
          </div>
        )}

        {/* –ö—Ä–æ–∫ 4: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è */}
        {currentStep === 4 && (
          <div className={styles.step}>
            <h3>‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</h3>

            <div className={styles.section}>
              <h4>–£–ª—é–±–ª–µ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å–∫—Ä–∏–Ω—ñ–Ω–≥—ñ–≤</h4>
              <div className={styles.categoryGrid}>
                {categories.map(category => (
                  <button
                    key={category}
                    type="button"
                    onClick={() => handleCategoryToggle(category)}
                    className={`${styles.categoryButton} ${
                      formData.preferences.preferredCategories.includes(category) ? styles.active : ''
                    }`}
                  >
                    {category}
                  </button>
                ))}
              </div>
            </div>

            <div className={styles.section}>
              <h4>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è</h4>
              <div className={styles.checkboxGroup}>
                <label className={styles.checkbox}>
                  <input
                    type="checkbox"
                    checked={formData.preferences.reminderSettings.enabled}
                    onChange={(e) => handleInputChange('enabled', e.target.checked, 'preferences.reminderSettings')}
                  />
                  –£–≤—ñ–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
                </label>
              </div>
              
              {formData.preferences.reminderSettings.enabled && (
                <>
                  <Input
                    type="number"
                    label="–ó–∞ —Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏"
                    value={formData.preferences.reminderSettings.beforeDays.toString()}
                    onChange={(e) => handleInputChange('beforeDays', parseInt(e.target.value) || 7, 'preferences.reminderSettings')}
                    min="1"
                    max="365"
                  />
                  
                  <Input
                    type="time"
                    label="–ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å"
                    value={formData.preferences.reminderSettings.timeOfDay}
                    onChange={(e) => handleInputChange('timeOfDay', e.target.value, 'preferences.reminderSettings')}
                  />
                </>
              )}
            </div>
          </div>
        )}

        <div className={styles.navigation}>
          {currentStep > 1 && (
            <Button
              type="button"
              variant="ghost"
              onClick={prevStep}
            >
              ‚Üê –ù–∞–∑–∞–¥
            </Button>
          )}
          
          <div className={styles.spacer} />
          
          {currentStep < totalSteps ? (
            <Button
              type="button"
              variant="primary"
              onClick={nextStep}
              disabled={!isStepValid()}
            >
              –î–∞–ª—ñ ‚Üí
            </Button>
          ) : (
            <Button
              type="submit"
              variant="primary"
              disabled={!isStepValid()}
            >
              {isEditing ? 'üíæ –ó–±–µ—Ä–µ–≥—Ç–∏' : '‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å'}
            </Button>
          )}
        </div>
      </form>
    </div>
  );
}; 