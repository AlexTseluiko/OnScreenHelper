import React, { useState, useMemo } from 'react';
import { UserProfile } from '@/types/user';
import { Screening } from '@/types/screening';
import { Button } from '@/components/atoms/Button/Button';
import { Input } from '@/components/atoms/Input/Input';
import { Modal } from '@/components/organisms/Modal/Modal';
import { useToast } from '@/hooks/useToast';
import styles from './ScreeningHistory.module.scss';

interface ScreeningHistoryProps {
  profile: UserProfile;
  screenings: Screening[];
  onAddCheckup: (screeningId: string, date: string, result: '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π' | '–ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏' | '–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è', notes?: string) => void;
}

interface AddCheckupModalData {
  isOpen: boolean;
  screeningId: string;
  title: string;
}

export const ScreeningHistory: React.FC<ScreeningHistoryProps> = ({
  profile,
  screenings,
  onAddCheckup
}) => {
  const [filterType, setFilterType] = useState<'all' | '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π' | '–ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏' | '–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'>('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [sortBy, setSortBy] = useState<'date' | 'result' | 'title'>('date');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [addModal, setAddModal] = useState<AddCheckupModalData>({ isOpen: false, screeningId: '', title: '' });
  const [newCheckup, setNewCheckup] = useState({
    date: new Date().toISOString().split('T')[0],
    result: '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π' as '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π' | '–ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏' | '–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è',
    notes: ''
  });
  const { success } = useToast();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∫—Ä–∏–Ω–∏–Ω–≥–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
  const checkupsWithDetails = useMemo(() => {
    return profile.medicalHistory.lastCheckups
      .map(checkup => {
        const screening = screenings.find(s => s.id === checkup.screeningId);
        return {
          ...checkup,
          screening: screening || {
            id: checkup.screeningId,
            title: '–ù–µ–≤—ñ–¥–æ–º–∏–π —Å–∫—Ä–∏–Ω—ñ–Ω–≥',
            category: '–Ü–Ω—à–µ' as const,
            description: '',
            ageRange: [0, 100] as [number, number],
            targetGender: ['—á–æ–ª–æ–≤—ñ—á–∏–π', '–∂—ñ–Ω–æ—á–∏–π'] as const,
            frequency: '–©–æ—Ä—ñ—á–Ω–æ',
            riskFactors: [],
            preparation: ''
          }
        };
      })
      .filter(checkup => {
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if (filterType !== 'all' && checkup.result !== filterType) {
          return false;
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
        if (searchQuery) {
          const query = searchQuery.toLowerCase();
          return (
            checkup.screening.title.toLowerCase().includes(query) ||
            checkup.screening.category.toLowerCase().includes(query) ||
            (checkup.notes && checkup.notes.toLowerCase().includes(query))
          );
        }
        
        return true;
      })
      .sort((a, b) => {
        let comparison = 0;
        
        switch (sortBy) {
          case 'date':
            comparison = new Date(a.date).getTime() - new Date(b.date).getTime();
            break;
          case 'result':
            const resultOrder = { '–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è': 0, '–ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏': 1, '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π': 2 };
            comparison = resultOrder[a.result] - resultOrder[b.result];
            break;
          case 'title':
            comparison = a.screening.title.localeCompare(b.screening.title, 'uk');
            break;
        }
        
        return sortOrder === 'asc' ? comparison : -comparison;
      });
  }, [profile.medicalHistory.lastCheckups, screenings, filterType, searchQuery, sortBy, sortOrder]);

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≥–æ–¥–∞–º
  const checkupsByYear = useMemo(() => {
    const grouped: { [year: string]: typeof checkupsWithDetails } = {};
    
    checkupsWithDetails.forEach(checkup => {
      const year = new Date(checkup.date).getFullYear().toString();
      if (!grouped[year]) {
        grouped[year] = [];
      }
      grouped[year].push(checkup);
    });
    
    return grouped;
  }, [checkupsWithDetails]);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const statistics = useMemo(() => {
    const total = checkupsWithDetails.length;
    const normal = checkupsWithDetails.filter(c => c.result === '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π').length;
    const attention = checkupsWithDetails.filter(c => c.result === '–ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏').length;
    const abnormal = checkupsWithDetails.filter(c => c.result === '–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è').length;
    
    const thisYear = new Date().getFullYear();
    const thisYearCheckups = checkupsWithDetails.filter(c => 
      new Date(c.date).getFullYear() === thisYear
    ).length;
    
    const lastMonth = new Date();
    lastMonth.setMonth(lastMonth.getMonth() - 1);
    const lastMonthCheckups = checkupsWithDetails.filter(c => 
      new Date(c.date) >= lastMonth
    ).length;
    
    return {
      total,
      normal,
      attention,
      abnormal,
      thisYear: thisYearCheckups,
      lastMonth: lastMonthCheckups
    };
  }, [checkupsWithDetails]);

  const handleAddCheckup = (screeningId: string, title: string) => {
    setAddModal({ isOpen: true, screeningId, title });
  };

  const handleConfirmAdd = () => {
    onAddCheckup(
      addModal.screeningId,
      newCheckup.date,
      newCheckup.result,
      newCheckup.notes || undefined
    );
    
    setAddModal({ isOpen: false, screeningId: '', title: '' });
    setNewCheckup({
      date: new Date().toISOString().split('T')[0],
      result: '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π',
      notes: ''
    });
    
    success('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó!');
  };

  const getResultIcon = (result: string) => {
    switch (result) {
      case '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π': return '‚úÖ';
      case '–ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏': return '‚ö†Ô∏è';
      case '–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è': return '‚ùå';
      default: return 'üìã';
    }
  };

  const getResultColor = (result: string) => {
    switch (result) {
      case '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π': return 'success';
      case '–ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏': return 'warning';
      case '–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è': return 'error';
      default: return 'primary';
    }
  };

  return (
    <div className={styles.screeningHistory}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className={styles.header}>
        <div className={styles.headerContent}>
          <h2>üìã –Ü—Å—Ç–æ—Ä—ñ—è –æ–±—Å—Ç–µ–∂–µ–Ω—å</h2>
          <p>–í–∞—à—ñ –º–µ–¥–∏—á–Ω—ñ –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏</p>
        </div>

        <div className={styles.statistics}>
          <div className={styles.statCard}>
            <span className={styles.statNumber}>{statistics.total}</span>
            <span className={styles.statLabel}>–í—Å—å–æ–≥–æ</span>
          </div>
          <div className={styles.statCard}>
            <span className={styles.statNumber}>{statistics.thisYear}</span>
            <span className={styles.statLabel}>–¶—å–æ–≥–æ —Ä–æ–∫—É</span>
          </div>
          <div className={`${styles.statCard} ${styles.success}`}>
            <span className={styles.statNumber}>{statistics.normal}</span>
            <span className={styles.statLabel}>–ù–æ—Ä–º–∞–ª—å–Ω—ñ</span>
          </div>
          <div className={`${styles.statCard} ${styles.warning}`}>
            <span className={styles.statNumber}>{statistics.attention}</span>
            <span className={styles.statLabel}>–ü–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏</span>
          </div>
          <div className={`${styles.statCard} ${styles.error}`}>
            <span className={styles.statNumber}>{statistics.abnormal}</span>
            <span className={styles.statLabel}>–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è</span>
          </div>
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
      <div className={styles.controls}>
        <div className={styles.searchSection}>
          <Input
            placeholder="–ü–æ—à—É–∫ –ø–æ –Ω–∞–∑–≤—ñ –∞–±–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className={styles.searchInput}
          />
        </div>

        <div className={styles.filters}>
          <select
            value={filterType}
            onChange={(e) => setFilterType(e.target.value as any)}
            className={styles.filterSelect}
          >
            <option value="all">–í—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏</option>
            <option value="–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π">‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ñ</option>
            <option value="–ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏">‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏</option>
            <option value="–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è">‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è</option>
          </select>

          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value as any)}
            className={styles.filterSelect}
          >
            <option value="date">–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é</option>
            <option value="result">–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º</option>
            <option value="title">–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –Ω–∞–∑–≤–æ—é</option>
          </select>

          <button
            onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
            className={styles.sortButton}
            title={`–ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—è–¥–æ–∫: ${sortOrder === 'asc' ? '–ü–æ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—é' : '–ü–æ —Å–ø–∞–¥–∞–Ω–Ω—é'}`}
          >
            {sortOrder === 'asc' ? '‚Üë' : '‚Üì'}
          </button>
        </div>

        <Button
          variant="primary"
          onClick={() => {
            const screening = screenings[0]; // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥
            if (screening) {
              handleAddCheckup(screening.id, screening.title);
            }
          }}
        >
          ‚ûï –î–æ–¥–∞—Ç–∏ –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è
        </Button>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–Ω–∏–Ω–≥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      <div className={styles.quickAdd}>
        <h4>–®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Å–∫—Ä–∏–Ω—ñ–Ω–≥—ñ–≤:</h4>
        <div className={styles.quickAddButtons}>
          {screenings.slice(0, 6).map(screening => (
            <button
              key={screening.id}
              onClick={() => handleAddCheckup(screening.id, screening.title)}
              className={styles.quickAddButton}
            >
              {screening.title}
            </button>
          ))}
        </div>
      </div>

      {/* –ò—Å—Ç–æ—Ä–∏—è –ø–æ –≥–æ–¥–∞–º */}
      <div className={styles.historyContent}>
        {Object.keys(checkupsByYear).length === 0 ? (
          <div className={styles.emptyState}>
            <h3>üìã –Ü—Å—Ç–æ—Ä—ñ—è –æ–±—Å—Ç–µ–∂–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è</h3>
            <p>–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è</p>
            <Button
              variant="primary"
              onClick={() => {
                const screening = screenings[0];
                if (screening) {
                  handleAddCheckup(screening.id, screening.title);
                }
              }}
            >
              –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—à–µ –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è
            </Button>
          </div>
        ) : (
          Object.entries(checkupsByYear)
            .sort(([yearA], [yearB]) => parseInt(yearB) - parseInt(yearA))
            .map(([year, yearCheckups]) => (
              <div key={year} className={styles.yearSection}>
                <h3 className={styles.yearTitle}>
                  {year} —Ä—ñ–∫
                  <span className={styles.yearCount}>({yearCheckups.length} –æ–±—Å—Ç–µ–∂–µ–Ω—å)</span>
                </h3>
                
                <div className={styles.checkupsList}>
                  {yearCheckups.map((checkup, index) => (
                    <div key={index} className={`${styles.checkupCard} ${styles[getResultColor(checkup.result)]}`}>
                      <div className={styles.checkupHeader}>
                        <div className={styles.checkupInfo}>
                          <h4>{checkup.screening.title}</h4>
                          <span className={styles.category}>{checkup.screening.category}</span>
                        </div>
                        <div className={styles.checkupMeta}>
                          <span className={styles.date}>
                            {new Date(checkup.date).toLocaleDateString('uk-UA')}
                          </span>
                          <span className={`${styles.result} ${styles[getResultColor(checkup.result)]}`}>
                            {getResultIcon(checkup.result)} {checkup.result}
                          </span>
                        </div>
                      </div>
                      
                      {checkup.notes && (
                        <div className={styles.notes}>
                          <strong>–ü—Ä–∏–º—ñ—Ç–∫–∏:</strong> {checkup.notes}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            ))
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      {addModal.isOpen && (
        <Modal onClose={() => setAddModal({ isOpen: false, screeningId: '', title: '' })}>
          <div className={styles.addModal}>
            <h3>‚ûï –î–æ–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è</h3>
            <p><strong>{addModal.title}</strong></p>

            <div className={styles.formSection}>
              <Input
                type="date"
                label="–î–∞—Ç–∞ –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è"
                value={newCheckup.date}
                onChange={(e) => setNewCheckup(prev => ({ ...prev, date: e.target.value }))}
              />
            </div>

            <div className={styles.formSection}>
              <label className={styles.label}>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è:</label>
              <div className={styles.resultOptions}>
                {(['–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π', '–ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏', '–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] as const).map(result => (
                  <label key={result} className={styles.radioOption}>
                    <input
                      type="radio"
                      name="result"
                      value={result}
                      checked={newCheckup.result === result}
                      onChange={(e) => setNewCheckup(prev => ({ ...prev, result: e.target.value as any }))}
                    />
                    <span>
                      {getResultIcon(result)} {result}
                    </span>
                  </label>
                ))}
              </div>
            </div>

            <div className={styles.formSection}>
              <label className={styles.label}>–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–∏–º—ñ—Ç–∫–∏ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ):</label>
              <textarea
                value={newCheckup.notes}
                onChange={(e) => setNewCheckup(prev => ({ ...prev, notes: e.target.value }))}
                placeholder="–î–æ–¥–∞–π—Ç–µ –ø—Ä–∏–º—ñ—Ç–∫–∏ –ø—Ä–æ –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ª—ñ–∫–∞—Ä—è —Ç–æ—â–æ..."
                className={styles.notesTextarea}
                rows={4}
              />
            </div>

            <div className={styles.modalActions}>
              <Button
                variant="ghost"
                onClick={() => setAddModal({ isOpen: false, screeningId: '', title: '' })}
              >
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </Button>
              <Button
                variant="primary"
                onClick={handleConfirmAdd}
              >
                –î–æ–¥–∞—Ç–∏
              </Button>
            </div>
          </div>
        </Modal>
      )}
    </div>
  );
}; 