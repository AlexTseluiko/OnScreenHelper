import React, { useState, useMemo, useCallback } from 'react';
import { PersonalizedRecommendation, HealthCalendarEvent } from '@/types/user';
import { ScreeningCategory } from '@/types/screening';
import { Button } from '@/components/atoms/Button/Button';
import { Modal } from '@/components/organisms/Modal/Modal';
import { Input } from '@/components/atoms/Input/Input';
import { useToast } from '@/hooks/useToast';
import { useUser } from '@/context/UserContext';
import styles from './HealthCalendar.module.scss';

interface HealthCalendarProps {
  recommendations: PersonalizedRecommendation[];
  calendarEvents: HealthCalendarEvent[];
  onMarkCompleted: (screeningId: string, date: string, result?: '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π' | '–ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏' | '–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è', notes?: string) => void;
}

interface CalendarDay {
  date: Date;
  isCurrentMonth: boolean;
  events: HealthCalendarEvent[];
  recommendations: PersonalizedRecommendation[];
}

interface CompletionModalData {
  screeningId: string;
  date: string;
  title: string;
}

interface ScheduleModalData {
  screeningId: string;
  title: string;
  category: ScreeningCategory;
  priority: '–≤–∏—Å–æ–∫–∞' | '—Å–µ—Ä–µ–¥–Ω—è' | '–Ω–∏–∑—å–∫–∞';
}

export const HealthCalendar: React.FC<HealthCalendarProps> = ({
  recommendations,
  calendarEvents,
  onMarkCompleted
}) => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedDay, setSelectedDay] = useState<CalendarDay | null>(null);
  const [completionModal, setCompletionModal] = useState<CompletionModalData | null>(null);
  const [scheduleModal, setScheduleModal] = useState<ScheduleModalData | null>(null);
  const [completionResult, setCompletionResult] = useState<'–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π' | '–ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏' | '–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'>('–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π');
  const [completionNotes, setCompletionNotes] = useState('');
  const [selectedDate, setSelectedDate] = useState('');
  const { success } = useToast();
  const { scheduleScreening } = useUser();

  const getEventsForDate = useCallback((date: Date): HealthCalendarEvent[] => {
    const dateStr = date.toISOString().split('T')[0];
    return calendarEvents.filter(event => event.date === dateStr);
  }, [calendarEvents]);

  const getRecommendationsForDate = useCallback((date: Date): PersonalizedRecommendation[] => {
    const dateStr = date.toISOString().split('T')[0];
    return recommendations.filter(rec => rec.nextRecommendedDate === dateStr);
  }, [recommendations]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
  const calendarDays = useMemo(() => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    const firstDayOfMonth = new Date(year, month, 1);
    const lastDayOfMonth = new Date(year, month + 1, 0);
    const firstDayOfWeek = firstDayOfMonth.getDay();
    const daysInMonth = lastDayOfMonth.getDate();
    
    const days: CalendarDay[] = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for (let i = firstDayOfWeek - 1; i >= 0; i--) {
      const date = new Date(year, month, -i);
      days.push({
        date,
        isCurrentMonth: false,
        events: getEventsForDate(date),
        recommendations: getRecommendationsForDate(date)
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= daysInMonth; day++) {
      const date = new Date(year, month, day);
      days.push({
        date,
        isCurrentMonth: true,
        events: getEventsForDate(date),
        recommendations: getRecommendationsForDate(date)
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –¥–æ 42 –¥–Ω–µ–π (6 –Ω–µ–¥–µ–ª—å)
    const remainingDays = 42 - days.length;
    for (let day = 1; day <= remainingDays; day++) {
      const date = new Date(year, month + 1, day);
      days.push({
        date,
        isCurrentMonth: false,
        events: getEventsForDate(date),
        recommendations: getRecommendationsForDate(date)
      });
    }
    
    return days;
  }, [currentDate, calendarEvents, recommendations, getEventsForDate, getRecommendationsForDate]);

  const handlePrevMonth = () => {
    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1));
  };

  const handleNextMonth = () => {
    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1));
  };

  const handleToday = () => {
    setCurrentDate(new Date());
  };

  const handleDayClick = (day: CalendarDay) => {
    setSelectedDay(day);
  };

  const handleMarkCompleted = (screeningId: string, date: string, title: string) => {
    setCompletionModal({ screeningId, date, title });
  };

  const handleScheduleScreening = (screeningId: string, title: string, category: ScreeningCategory, priority: '–≤–∏—Å–æ–∫–∞' | '—Å–µ—Ä–µ–¥–Ω—è' | '–Ω–∏–∑—å–∫–∞') => {
    setScheduleModal({ screeningId, title, category, priority });
    setSelectedDate(new Date().toISOString().split('T')[0]); // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å—å–æ–≥–æ–¥–Ω—ñ
  };

  const handleConfirmSchedule = () => {
    if (scheduleModal && selectedDate) {
      scheduleScreening(
        scheduleModal.screeningId,
        selectedDate,
        scheduleModal.title,
        scheduleModal.category,
        scheduleModal.priority
      );
      setScheduleModal(null);
      setSelectedDate('');
      success('–°–∫—Ä–∏–Ω—ñ–Ω–≥ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ!');
    }
  };

  const handleConfirmCompletion = () => {
    if (completionModal) {
      onMarkCompleted(
        completionModal.screeningId,
        completionModal.date,
        completionResult,
        completionNotes
      );
      setCompletionModal(null);
      setCompletionNotes('');
      setCompletionResult('–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π');
      success('–°–∫—Ä–∏–Ω—ñ–Ω–≥ –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π!');
    }
  };

  const monthNames = [
    '–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å',
    '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'
  ];

  const weekDays = ['–ù–¥', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];

  const isToday = (date: Date) => {
    const today = new Date();
    return date.toDateString() === today.toDateString();
  };

  const isPast = (date: Date) => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    return date < today;
  };

  return (
    <div className={styles.healthCalendar}>
      <div className={styles.calendarHeader}>
        <div className={styles.navigation}>
          <Button variant="ghost" onClick={handlePrevMonth}>
            ‚Üê –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π
          </Button>
          <h2 className={styles.monthTitle}>
            {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}
          </h2>
          <Button variant="ghost" onClick={handleNextMonth}>
            –ù–∞—Å—Ç—É–ø–Ω–∏–π ‚Üí
          </Button>
        </div>
        <Button variant="outline" onClick={handleToday}>
          –°—å–æ–≥–æ–¥–Ω—ñ
        </Button>
      </div>

      {/* –®–≤–∏–¥–∫–µ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è */}
      {recommendations.length > 0 && (
        <div className={styles.quickScheduling}>
          <h3>‚ö° –®–≤–∏–¥–∫–µ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è</h3>
          <p>–ù–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Å–∫—Ä–∏–Ω—ñ–Ω–≥–∏:</p>
          <div className={styles.quickSchedulingCards}>
            {recommendations
              .filter(rec => rec.priority === '–≤–∏—Å–æ–∫–∞' || rec.isOverdue)
              .slice(0, 3)
              .map((rec, idx) => (
                <div key={idx} className={`${styles.quickCard} ${styles[rec.priority]}`}>
                  <div className={styles.quickCardHeader}>
                    <h4>{rec.screening.title}</h4>
                    <span className={styles.urgency}>
                      {rec.isOverdue ? '‚ö†Ô∏è –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ' : 'üî¥ –í–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç'}
                    </span>
                  </div>
                  <p className={styles.quickReason}>{rec.reason}</p>
                  <div className={styles.quickActions}>
                    <Button
                      size="sm"
                      variant="primary"
                      onClick={() => handleScheduleScreening(
                        rec.screening.id,
                        rec.screening.title,
                        rec.screening.category,
                        rec.priority
                      )}
                    >
                      üìÖ –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏
                    </Button>
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => handleMarkCompleted(
                        rec.screening.id,
                        new Date().toISOString().split('T')[0],
                        rec.screening.title
                      )}
                    >
                      ‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ
                    </Button>
                  </div>
                </div>
              ))
            }
          </div>
        </div>
      )}

      <div className={styles.calendar}>
        <div className={styles.weekDaysHeader}>
          {weekDays.map(day => (
            <div key={day} className={styles.weekDay}>
              {day}
            </div>
          ))}
        </div>

        <div className={styles.calendarGrid}>
          {calendarDays.map((day, index) => (
            <div
              key={index}
              className={`${styles.calendarDay} ${
                !day.isCurrentMonth ? styles.otherMonth : ''
              } ${
                isToday(day.date) ? styles.today : ''
              } ${
                isPast(day.date) ? styles.past : ''
              } ${
                day.events.length > 0 || day.recommendations.length > 0 ? styles.hasEvents : ''
              }`}
              onClick={() => handleDayClick(day)}
            >
              <span className={styles.dayNumber}>
                {day.date.getDate()}
              </span>

              <div className={styles.dayEvents}>
                {day.recommendations.map((rec, idx) => (
                  <div
                    key={idx}
                    className={`${styles.event} ${styles[rec.priority]} ${rec.isOverdue ? styles.overdue : ''}`}
                    title={rec.screening.title}
                  >
                    <span className={styles.eventDot}>
                      {rec.priority === '–≤–∏—Å–æ–∫–∞' && 'üî¥'}
                      {rec.priority === '—Å–µ—Ä–µ–¥–Ω—è' && 'üü°'}
                      {rec.priority === '–Ω–∏–∑—å–∫–∞' && 'üü¢'}
                    </span>
                  </div>
                ))}

                {day.events.map((event, idx) => (
                  <div
                    key={idx}
                    className={`${styles.event} ${styles[event.type]}`}
                    title={event.title}
                  >
                    <span className={styles.eventDot}>
                      {event.type === 'completed' && '‚úÖ'}
                      {event.type === 'scheduled' && 'üìÖ'}
                      {event.type === 'overdue' && '‚ö†Ô∏è'}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –¥–µ—Ç–∞–ª—è–º–∏ –¥–Ω—è */}
      {selectedDay && (
        <div className={styles.dayDetails}>
          <div className={styles.dayDetailsHeader}>
            <h3>
              {selectedDay.date.toLocaleDateString('uk-UA', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </h3>
            <button 
              onClick={() => setSelectedDay(null)}
              className={styles.closeDetails}
            >
              ‚úï
            </button>
          </div>

          <div className={styles.dayDetailsContent}>
            {selectedDay.recommendations.length > 0 && (
              <div className={styles.section}>
                <h4>üìã –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Å–∫—Ä–∏–Ω—ñ–Ω–≥–∏</h4>
                {selectedDay.recommendations.map((rec, idx) => (
                  <div key={idx} className={`${styles.recommendationCard} ${styles[rec.priority]}`}>
                    <div className={styles.recHeader}>
                      <h5>{rec.screening.title}</h5>
                      <span className={styles.priority}>
                        {rec.priority === '–≤–∏—Å–æ–∫–∞' && 'üî¥ –í–∏—Å–æ–∫–∏–π'}
                        {rec.priority === '—Å–µ—Ä–µ–¥–Ω—è' && 'üü° –°–µ—Ä–µ–¥–Ω—ñ–π'}
                        {rec.priority === '–Ω–∏–∑—å–∫–∞' && 'üü¢ –ù–∏–∑—å–∫–∏–π'}
                      </span>
                    </div>
                    <p className={styles.reason}>{rec.reason}</p>
                    <div className={styles.recActions}>
                      <Button
                        size="sm"
                        variant="primary"
                        onClick={() => handleMarkCompleted(
                          rec.screening.id,
                          selectedDay.date.toISOString().split('T')[0],
                          rec.screening.title
                        )}
                      >
                        –í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ
                      </Button>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => handleScheduleScreening(
                          rec.screening.id,
                          rec.screening.title,
                          rec.screening.category,
                          rec.priority
                        )}
                      >
                        –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –Ω–∞ —ñ–Ω—à—É –¥–∞—Ç—É
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {selectedDay.events.length > 0 && (
              <div className={styles.section}>
                <h4>üìÖ –ü–æ–¥—ñ—ó</h4>
                {selectedDay.events.map((event, idx) => (
                  <div key={idx} className={`${styles.eventCard} ${styles[event.type]}`}>
                    <h5>{event.title}</h5>
                    <p className={styles.eventType}>
                      {event.type === 'completed' && '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ'}
                      {event.type === 'scheduled' && 'üìÖ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ'}
                      {event.type === 'overdue' && '‚ö†Ô∏è –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ'}
                    </p>
                    {event.notes && (
                      <p className={styles.eventNotes}>{event.notes}</p>
                    )}
                  </div>
                ))}
              </div>
            )}

            {selectedDay.recommendations.length === 0 && selectedDay.events.length === 0 && (
              <div className={styles.emptyDay}>
                <p>üìÖ –ù–∞ —Ü–µ–π –¥–µ–Ω—å –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Å–∫—Ä–∏–Ω—ñ–Ω–≥—ñ–≤</p>
              </div>
            )}

            {/* –°–µ–∫—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å–∫—Ä–∏–Ω—ñ–Ω–≥—ñ–≤ */}
            <div className={styles.section}>
              <h4>üìÖ –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Å–∫—Ä–∏–Ω—ñ–Ω–≥ –Ω–∞ —Ü—é –¥–∞—Ç—É</h4>
              <div className={styles.planningSection}>
                <p>–û–±–µ—Ä—ñ—Ç—å —Å–∫—Ä–∏–Ω—ñ–Ω–≥ –∑—ñ —Å–ø–∏—Å–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö:</p>
                {recommendations
                  .filter(rec => !selectedDay.events.some(event => event.screeningId === rec.screening.id))
                  .slice(0, 5)
                  .map((rec, idx) => (
                    <div key={idx} className={styles.planningCard}>
                      <div className={styles.planningHeader}>
                        <h6>{rec.screening.title}</h6>
                        <span className={`${styles.priority} ${styles[rec.priority]}`}>
                          {rec.priority === '–≤–∏—Å–æ–∫–∞' && 'üî¥'}
                          {rec.priority === '—Å–µ—Ä–µ–¥–Ω—è' && 'üü°'}
                          {rec.priority === '–Ω–∏–∑—å–∫–∞' && 'üü¢'}
                        </span>
                      </div>
                      <div className={styles.planningActions}>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => {
                            scheduleScreening(
                              rec.screening.id,
                              selectedDay.date.toISOString().split('T')[0],
                              rec.screening.title,
                              rec.screening.category,
                              rec.priority
                            );
                            success(`${rec.screening.title} –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ ${selectedDay.date.toLocaleDateString('uk-UA')}`);
                          }}
                        >
                          + –ù–∞ —Ü—é –¥–∞—Ç—É
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleScheduleScreening(
                            rec.screening.id,
                            rec.screening.title,
                            rec.screening.category,
                            rec.priority
                          )}
                        >
                          üìÖ –û–±—Ä–∞—Ç–∏ –¥–∞—Ç—É
                        </Button>
                      </div>
                    </div>
                  ))
                }
                {recommendations.filter(rec => !selectedDay.events.some(event => event.screeningId === rec.screening.id)).length === 0 && (
                  <p className={styles.noRecommendations}>–í—Å—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Å–∫—Ä–∏–Ω—ñ–Ω–≥–∏ –≤–∂–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ</p>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
      {completionModal && (
        <Modal onClose={() => setCompletionModal(null)}>
          <div className={styles.completionModal}>
            <h3>‚úÖ –í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —Å–∫—Ä–∏–Ω—ñ–Ω–≥ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏–π</h3>
            <p><strong>{completionModal.title}</strong></p>
            <p>–î–∞—Ç–∞: {new Date(completionModal.date).toLocaleDateString('uk-UA')}</p>

            <div className={styles.resultSection}>
              <label className={styles.label}>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è:</label>
              <div className={styles.resultOptions}>
                {(['–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π', '–ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏', '–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] as const).map(result => (
                  <label key={result} className={styles.radioOption}>
                    <input
                      type="radio"
                      name="result"
                      value={result}
                      checked={completionResult === result}
                      onChange={(e) => setCompletionResult(e.target.value as any)}
                    />
                    <span>
                      {result === '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π' && '‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∏–π'}
                      {result === '–ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏' && '‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏'}
                      {result === '–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è' && '‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'}
                    </span>
                  </label>
                ))}
              </div>
            </div>

            <div className={styles.notesSection}>
              <label className={styles.label}>–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–∏–º—ñ—Ç–∫–∏ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ):</label>
              <textarea
                value={completionNotes}
                onChange={(e) => setCompletionNotes(e.target.value)}
                placeholder="–î–æ–¥–∞–π—Ç–µ –ø—Ä–∏–º—ñ—Ç–∫–∏ –ø—Ä–æ –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è..."
                className={styles.notesTextarea}
                rows={3}
              />
            </div>

            <div className={styles.modalActions}>
              <Button
                variant="ghost"
                onClick={() => setCompletionModal(null)}
              >
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </Button>
              <Button
                variant="primary"
                onClick={handleConfirmCompletion}
              >
                –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏
              </Button>
            </div>
          </div>
        </Modal>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Å–∫—Ä–∏–Ω—ñ–Ω–≥—É */}
      {scheduleModal && (
        <Modal onClose={() => setScheduleModal(null)}>
          <div className={styles.scheduleModal}>
            <h3>üìÖ –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Å–∫—Ä–∏–Ω—ñ–Ω–≥</h3>
            <p><strong>{scheduleModal.title}</strong></p>
            <p>–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: 
              <span className={`${styles.priority} ${styles[scheduleModal.priority]}`}>
                {scheduleModal.priority === '–≤–∏—Å–æ–∫–∞' && 'üî¥ –í–∏—Å–æ–∫–∏–π'}
                {scheduleModal.priority === '—Å–µ—Ä–µ–¥–Ω—è' && 'üü° –°–µ—Ä–µ–¥–Ω—ñ–π'}
                {scheduleModal.priority === '–Ω–∏–∑—å–∫–∞' && 'üü¢ –ù–∏–∑—å–∫–∏–π'}
              </span>
            </p>

            <div className={styles.dateSection}>
              <label className={styles.label}>–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:</label>
              <Input
                type="date"
                value={selectedDate}
                onChange={(e) => setSelectedDate(e.target.value)}
                min={new Date().toISOString().split('T')[0]}
              />
              
              <div className={styles.quickDates}>
                <p className={styles.quickDatesLabel}>–®–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä:</p>
                <div className={styles.quickDateButtons}>
                  {[
                    { label: '–ó–∞–≤—Ç—Ä–∞', days: 1 },
                    { label: '–ß–µ—Ä–µ–∑ —Ç–∏–∂–¥–µ–Ω—å', days: 7 },
                    { label: '–ß–µ—Ä–µ–∑ 2 —Ç–∏–∂–Ω—ñ', days: 14 },
                    { label: '–ß–µ—Ä–µ–∑ –º—ñ—Å—è—Ü—å', days: 30 }
                  ].map(({ label, days }) => {
                    const date = new Date();
                    date.setDate(date.getDate() + days);
                    const dateStr = date.toISOString().split('T')[0];
                    
                    return (
                      <Button
                        key={label}
                        size="sm"
                        variant="ghost"
                        onClick={() => setSelectedDate(dateStr)}
                        className={selectedDate === dateStr ? styles.selectedQuickDate : ''}
                      >
                        {label}
                      </Button>
                    );
                  })}
                </div>
              </div>
            </div>

            <div className={styles.modalActions}>
              <Button
                variant="ghost"
                onClick={() => setScheduleModal(null)}
              >
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </Button>
              <Button
                variant="primary"
                onClick={handleConfirmSchedule}
                disabled={!selectedDate}
              >
                –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏
              </Button>
            </div>
          </div>
        </Modal>
      )}
    </div>
  );
}; 