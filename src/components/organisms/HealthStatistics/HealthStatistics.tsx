import React, { useMemo } from 'react';
import { UserProfile, PersonalizedRecommendation } from '@/types/user';
import { Screening } from '@/types/screening';
import styles from './HealthStatistics.module.scss';

interface HealthStatisticsProps {
  profile: UserProfile;
  recommendations: PersonalizedRecommendation[];
  screenings: Screening[];
}

interface StatData {
  labels: string[];
  values: number[];
  colors: string[];
}

export const HealthStatistics: React.FC<HealthStatisticsProps> = ({
  profile,
  recommendations,
  screenings
}) => {
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
  const resultStats = useMemo(() => {
    const results = profile.medicalHistory.lastCheckups;
    const normal = results.filter(r => r.result === '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π').length;
    const attention = results.filter(r => r.result === '–ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏').length;
    const abnormal = results.filter(r => r.result === '–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è').length;
    const total = results.length;

    return {
      labels: ['–ù–æ—Ä–º–∞–ª—å–Ω—ñ', '–ü–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏', '–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'],
      values: [normal, attention, abnormal],
      colors: ['#10b981', '#f59e0b', '#ef4444'],
      total
    };
  }, [profile.medicalHistory.lastCheckups]);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const categoryStats = useMemo(() => {
    const categoryCount: { [key: string]: number } = {};
    
    profile.medicalHistory.lastCheckups.forEach(checkup => {
      const screening = screenings.find(s => s.id === checkup.screeningId);
      if (screening) {
        categoryCount[screening.category] = (categoryCount[screening.category] || 0) + 1;
      }
    });

    const sortedCategories = Object.entries(categoryCount)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5);

    return {
      labels: sortedCategories.map(([category]) => category),
      values: sortedCategories.map(([, count]) => count),
      colors: ['#3b82f6', '#8b5cf6', '#ec4899', '#06b6d4', '#84cc16']
    };
  }, [profile.medicalHistory.lastCheckups, screenings]);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
  const monthlyStats = useMemo(() => {
    const months = ['–°—ñ—á', '–õ—é—Ç', '–ë–µ—Ä', '–ö–≤—ñ', '–¢—Ä–∞', '–ß–µ—Ä', '–õ–∏–ø', '–°–µ—Ä', '–í–µ—Ä', '–ñ–æ–≤', '–õ–∏—Å', '–ì—Ä—É'];
    const monthlyCount = new Array(12).fill(0);
    const currentYear = new Date().getFullYear();

    profile.medicalHistory.lastCheckups.forEach(checkup => {
      const date = new Date(checkup.date);
      if (date.getFullYear() === currentYear) {
        monthlyCount[date.getMonth()]++;
      }
    });

    return {
      labels: months,
      values: monthlyCount,
      colors: ['#3b82f6']
    };
  }, [profile.medicalHistory.lastCheckups]);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const priorityStats = useMemo(() => {
    const high = recommendations.filter(r => r.priority === '–≤–∏—Å–æ–∫–∞').length;
    const medium = recommendations.filter(r => r.priority === '—Å–µ—Ä–µ–¥–Ω—è').length;
    const low = recommendations.filter(r => r.priority === '–Ω–∏–∑—å–∫–∞').length;

    return {
      labels: ['–í–∏—Å–æ–∫–∏–π', '–°–µ—Ä–µ–¥–Ω—ñ–π', '–ù–∏–∑—å–∫–∏–π'],
      values: [high, medium, low],
      colors: ['#ef4444', '#f59e0b', '#10b981']
    };
  }, [recommendations]);

  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const generalStats = useMemo(() => {
    const totalCheckups = profile.medicalHistory.lastCheckups.length;
    const thisYear = profile.medicalHistory.lastCheckups.filter(c => 
      new Date(c.date).getFullYear() === new Date().getFullYear()
    ).length;
    
    const lastMonth = new Date();
    lastMonth.setMonth(lastMonth.getMonth() - 1);
    const recentCheckups = profile.medicalHistory.lastCheckups.filter(c => 
      new Date(c.date) >= lastMonth
    ).length;

    const overdueRecommendations = recommendations.filter(r => r.isOverdue).length;
    const upcomingRecommendations = recommendations.filter(r => 
      !r.isOverdue && new Date(r.nextRecommendedDate) <= new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
    ).length;

    return {
      totalCheckups,
      thisYear,
      recentCheckups,
      overdueRecommendations,
      upcomingRecommendations,
      totalRecommendations: recommendations.length
    };
  }, [profile.medicalHistory.lastCheckups, recommendations]);

  const SimpleChart: React.FC<{ data: StatData; type: 'pie' | 'bar'; title: string }> = ({ data, type, title }) => {
    const maxValue = Math.max(...data.values);
    
    if (type === 'pie') {
      const total = data.values.reduce((sum, val) => sum + val, 0);
      if (total === 0) return <div className={styles.noData}>–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö</div>;

      let cumulativePercentage = 0;
      const segments = data.values.map((value, index) => {
        const percentage = (value / total) * 100;
        const startAngle = cumulativePercentage * 3.6; // Convert to degrees
        const endAngle = (cumulativePercentage + percentage) * 3.6;
        cumulativePercentage += percentage;

        return {
          percentage,
          startAngle,
          endAngle,
          color: data.colors[index],
          label: data.labels[index],
          value
        };
      });

      return (
        <div className={styles.chartContainer}>
          <h4 className={styles.chartTitle}>{title}</h4>
          <div className={styles.pieChart}>
            <div className={styles.pieChartSvg}>
              <svg viewBox="0 0 200 200" width="160" height="160">
                <circle cx="100" cy="100" r="80" fill="none" stroke="#f3f4f6" strokeWidth="8" />
                {segments.map((segment, index) => {
                  const radius = 80;
                  const centerX = 100;
                  const centerY = 100;
                  
                  const startAngleRad = (segment.startAngle - 90) * (Math.PI / 180);
                  const endAngleRad = (segment.endAngle - 90) * (Math.PI / 180);
                  
                  const x1 = centerX + radius * Math.cos(startAngleRad);
                  const y1 = centerY + radius * Math.sin(startAngleRad);
                  const x2 = centerX + radius * Math.cos(endAngleRad);
                  const y2 = centerY + radius * Math.sin(endAngleRad);
                  
                  const largeArc = segment.percentage > 50 ? 1 : 0;
                  const pathData = `M ${centerX} ${centerY} L ${x1} ${y1} A ${radius} ${radius} 0 ${largeArc} 1 ${x2} ${y2} Z`;
                  
                  return (
                    <path
                      key={index}
                      d={pathData}
                      fill={segment.color}
                      stroke="white"
                      strokeWidth="2"
                    />
                  );
                })}
              </svg>
            </div>
            <div className={styles.pieChartLegend}>
              {segments.map((segment, index) => (
                <div key={index} className={styles.legendItem}>
                  <div 
                    className={styles.legendColor} 
                    style={{ backgroundColor: segment.color }}
                  />
                  <span className={styles.legendLabel}>
                    {segment.label}: {segment.value} ({segment.percentage.toFixed(1)}%)
                  </span>
                </div>
              ))}
            </div>
          </div>
        </div>
      );
    }

    // Bar chart
    return (
      <div className={styles.chartContainer}>
        <h4 className={styles.chartTitle}>{title}</h4>
        <div className={styles.barChart}>
          {data.labels.map((label, index) => (
            <div key={index} className={styles.barItem}>
              <div className={styles.barContainer}>
                <div 
                  className={styles.bar}
                  style={{ 
                    height: `${(data.values[index] / maxValue) * 100}%`,
                    backgroundColor: data.colors[index % data.colors.length]
                  }}
                />
                <span className={styles.barValue}>{data.values[index]}</span>
              </div>
              <span className={styles.barLabel}>{label}</span>
            </div>
          ))}
        </div>
      </div>
    );
  };

  return (
    <div className={styles.healthStatistics}>
      <div className={styles.header}>
        <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤'—è</h2>
        <p>–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –º–µ–¥–∏—á–Ω–∏—Ö –æ–±—Å—Ç–µ–∂–µ–Ω—å —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π</p>
      </div>

      {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className={styles.generalStatsGrid}>
        <div className={styles.statCard}>
          <div className={styles.statIcon}>üìã</div>
          <div className={styles.statContent}>
            <h3>{generalStats.totalCheckups}</h3>
            <p>–í—Å—å–æ–≥–æ –æ–±—Å—Ç–µ–∂–µ–Ω—å</p>
          </div>
        </div>

        <div className={styles.statCard}>
          <div className={styles.statIcon}>üìÖ</div>
          <div className={styles.statContent}>
            <h3>{generalStats.thisYear}</h3>
            <p>–¶—å–æ–≥–æ —Ä–æ–∫—É</p>
          </div>
        </div>

        <div className={styles.statCard}>
          <div className={styles.statIcon}>üéØ</div>
          <div className={styles.statContent}>
            <h3>{generalStats.totalRecommendations}</h3>
            <p>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π</p>
          </div>
        </div>

        <div className={`${styles.statCard} ${generalStats.overdueRecommendations > 0 ? styles.warning : ''}`}>
          <div className={styles.statIcon}>‚ö†Ô∏è</div>
          <div className={styles.statContent}>
            <h3>{generalStats.overdueRecommendations}</h3>
            <p>–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ</p>
          </div>
        </div>

        <div className={styles.statCard}>
          <div className={styles.statIcon}>üìà</div>
          <div className={styles.statContent}>
            <h3>{generalStats.upcomingRecommendations}</h3>
            <p>–ù–∞–π–±–ª–∏–∂—á—ñ 30 –¥–Ω—ñ–≤</p>
          </div>
        </div>

        <div className={styles.statCard}>
          <div className={styles.statIcon}>üî•</div>
          <div className={styles.statContent}>
            <h3>{generalStats.recentCheckups}</h3>
            <p>–û—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å</p>
          </div>
        </div>
      </div>

      {/* –ì—Ä–∞—Ñ–∏–∫–∏ */}
      <div className={styles.chartsGrid}>
        {resultStats.total > 0 && (
          <SimpleChart 
            data={resultStats} 
            type="pie" 
            title="–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—Å—Ç–µ–∂–µ–Ω—å" 
          />
        )}

        {categoryStats.values.length > 0 && (
          <SimpleChart 
            data={categoryStats} 
            type="bar" 
            title="–û–±—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏" 
          />
        )}

        {recommendations.length > 0 && (
          <SimpleChart 
            data={priorityStats} 
            type="pie" 
            title="–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π" 
          />
        )}

        <SimpleChart 
          data={monthlyStats} 
          type="bar" 
          title={`–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å ${new Date().getFullYear()} —Ä–æ–∫—É`} 
        />
      </div>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
      <div className={styles.detailedAnalytics}>
        <h3>üìà –î–µ—Ç–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞</h3>
        
        <div className={styles.analyticsGrid}>
          <div className={styles.analyticsCard}>
            <h4>üéØ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</h4>
            <div className={styles.progressIndicator}>
              <div className={styles.progressBar}>
                <div 
                  className={styles.progressFill}
                  style={{ 
                    width: `${generalStats.totalCheckups > 0 ? 
                      (resultStats.values[0] / generalStats.totalCheckups) * 100 : 0}%`
                  }}
                />
              </div>
              <span>
                {generalStats.totalCheckups > 0 ? 
                  Math.round((resultStats.values[0] / generalStats.totalCheckups) * 100) : 0}% 
                –Ω–æ—Ä–º–∞–ª—å–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
              </span>
            </div>
          </div>

          <div className={styles.analyticsCard}>
            <h4>üìä –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</h4>
            <div className={styles.activityMetrics}>
              <div className={styles.metric}>
                <span className={styles.metricLabel}>–°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ –º—ñ—Å—è—Ü—å:</span>
                <span className={styles.metricValue}>
                  {generalStats.totalCheckups > 0 ? 
                    Math.round(generalStats.totalCheckups / 12 * 10) / 10 : 0}
                </span>
              </div>
              <div className={styles.metric}>
                <span className={styles.metricLabel}>–û—Å—Ç–∞–Ω–Ω—î –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è:</span>
                <span className={styles.metricValue}>
                  {profile.medicalHistory.lastCheckups.length > 0 ? 
                    new Date(
                      profile.medicalHistory.lastCheckups
                        .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())[0].date
                    ).toLocaleDateString('uk-UA') : '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö'}
                </span>
              </div>
            </div>
          </div>

          <div className={styles.analyticsCard}>
            <h4>üîÆ –ü—Ä–æ–≥–Ω–æ–∑</h4>
            <div className={styles.forecast}>
              <p>
                {generalStats.overdueRecommendations > 0 ? 
                  `‚ö†Ô∏è –£ –≤–∞—Å ${generalStats.overdueRecommendations} –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π` :
                  '‚úÖ –í—Å—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –≤—á–∞—Å–Ω–æ'
                }
              </p>
              <p>
                {generalStats.upcomingRecommendations > 0 ? 
                  `üìÖ –ù–∞–π–±–ª–∏–∂—á—ñ 30 –¥–Ω—ñ–≤: ${generalStats.upcomingRecommendations} –æ–±—Å—Ç–µ–∂–µ–Ω—å` :
                  'üìÖ –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –æ–±—Å—Ç–µ–∂–µ–Ω—å –Ω–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ'
                }
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <div className={styles.recommendations}>
        <h3>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–¥–æ—Ä–æ–≤'—è</h3>
        <div className={styles.recommendationsList}>
          {generalStats.overdueRecommendations > 0 && (
            <div className={`${styles.recommendationItem} ${styles.urgent}`}>
              <span className={styles.recommendationIcon}>üö®</span>
              <div className={styles.recommendationText}>
                <strong>–¢–µ—Ä–º—ñ–Ω–æ–≤–æ:</strong> –£ –≤–∞—Å —î –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è. 
                –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.
              </div>
            </div>
          )}

          {generalStats.recentCheckups === 0 && (
            <div className={`${styles.recommendationItem} ${styles.warning}`}>
              <span className={styles.recommendationIcon}>‚è∞</span>
              <div className={styles.recommendationText}>
                <strong>–£–≤–∞–≥–∞:</strong> –í–∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–±—Å—Ç–µ–∂–µ–Ω—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å. 
                –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–≥–ª—è–¥—É.
              </div>
            </div>
          )}

          {resultStats.values[2] > 0 && (
            <div className={`${styles.recommendationItem} ${styles.important}`}>
              <span className={styles.recommendationIcon}>üë®‚Äç‚öïÔ∏è</span>
              <div className={styles.recommendationText}>
                <strong>–í–∞–∂–ª–∏–≤–æ:</strong> –£ –≤–∞—Å —î –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–±—Å—Ç–µ–∂–µ–Ω—å. 
                –û–±–≥–æ–≤–æ—Ä—ñ—Ç—å –∑ –ª—ñ–∫–∞—Ä–µ–º –ø–ª–∞–Ω –ª—ñ–∫—É–≤–∞–Ω–Ω—è.
              </div>
            </div>
          )}

          <div className={styles.recommendationItem}>
            <span className={styles.recommendationIcon}>üìã</span>
            <div className={styles.recommendationText}>
              –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–Ω–æ–≤–ª—é–π—Ç–µ —Å–≤–æ—é –º–µ–¥–∏—á–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é —Ç–∞ —Å–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏.
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}; 