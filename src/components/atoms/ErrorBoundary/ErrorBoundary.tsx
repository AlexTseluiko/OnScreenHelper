import { Component, ErrorInfo, ReactNode } from 'react';
import { cleanupCorruptedData } from '@/utils/encryption';
import styles from './ErrorBoundary.module.scss';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

export class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    // Production-ready error reporting (–±–µ–∑ console.log)
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±—É–¥–µ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Sentry –∞–±–æ —ñ–Ω—à–∏–º —Å–µ—Ä–≤—ñ—Å–æ–º
    
    // –õ–æ–∫–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–±–µ–∑ –≤–∏–≤–æ–¥—É –≤ –∫–æ–Ω—Å–æ–ª—å)
    if (typeof window !== 'undefined' && window.localStorage) {
      try {
        const errorLog = {
          timestamp: new Date().toISOString(),
          error: error.message,
          stack: error.stack,
          componentStack: errorInfo.componentStack,
          userAgent: navigator.userAgent
        };
        
        const existingLogs = localStorage.getItem('errorLogs');
        const logs = existingLogs ? JSON.parse(existingLogs) : [];
        logs.push(errorLog);
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 50 –ø–æ–º–∏–ª–æ–∫
        if (logs.length > 50) {
          logs.splice(0, logs.length - 50);
        }
        
        localStorage.setItem('errorLogs', JSON.stringify(logs));
      } catch {
        // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è
      }
    }
  }

  private handleClearData = () => {
    try {
      cleanupCorruptedData();
      // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
      window.location.reload();
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:', error);
    }
  };

  private handleReload = () => {
    window.location.reload();
  };

  public render() {
    if (this.state.hasError) {
      return (
        <div className={styles.errorBoundary}>
          <div className={styles.errorCard}>
            <div className={styles.errorIcon}>üí•</div>
            <h1>–£–ø—Å! –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫</h1>
            <p>
              –í–∏–Ω–∏–∫–ª–∞ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É. –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ–≤'—è–∑–∞–Ω–æ 
              –∑ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –∞–±–æ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ.
            </p>
            
            <div className={styles.errorDetails}>
              <summary>–¢–µ—Ö–Ω—ñ—á–Ω—ñ –¥–µ—Ç–∞–ª—ñ</summary>
              <code>{this.state.error?.message}</code>
            </div>

            <div className={styles.errorActions}>
              <button 
                onClick={this.handleReload}
                className={styles.primaryButton}
              >
                üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
              </button>
              <button 
                onClick={this.handleClearData}
                className={styles.secondaryButton}
              >
                üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ
              </button>
            </div>

            <div className={styles.supportInfo}>
              <p>
                –Ø–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è, —Å–ø—Ä–æ–±—É–π—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ –∞–±–æ 
                –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.
              </p>
            </div>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
} 