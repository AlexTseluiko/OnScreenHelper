import React, { useEffect, useState } from 'react';
import styles from './AdBanner.module.scss';

export interface AdBannerProps {
  size: 'banner' | 'rectangle' | 'leaderboard' | 'native' | 'interstitial';
  position?: 'top' | 'bottom' | 'middle';
  className?: string;
  testAd?: boolean; // –î–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
}

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ IAB –¥–ª—è —Ä–µ–∫–ª–∞–º–∏
const AD_SIZES = {
  banner: { width: 320, height: 50 },      // Mobile Banner
  rectangle: { width: 300, height: 250 },  // Medium Rectangle  
  leaderboard: { width: 728, height: 90 }, // Leaderboard
  native: { width: '100%', height: 'auto' }, // Native Ad
  interstitial: { width: '100%', height: '100%' } // Full Screen
};

const AdBanner: React.FC<AdBannerProps> = ({ 
  size, 
  position = 'middle', 
  className = '', 
  testAd = true 
}) => {
  const [isLoaded, setIsLoaded] = useState(false);
  const [error, setError] = useState(false);

  useEffect(() => {
    // –°–∏–º—É–ª—è—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏
    const loadAd = async () => {
      try {
        // –£ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ —Ç—É—Ç –±—É–¥–µ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ AdMob/Google Ads
        await new Promise(resolve => setTimeout(resolve, 1000));
        setIsLoaded(true);
      } catch (err) {
        setError(true);
      }
    };

    loadAd();
  }, []);

  const adSize = AD_SIZES[size];
  
  if (error) {
    return null; // –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ –Ω—ñ—á–æ–≥–æ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
  }

  return (
    <div 
      className={`${styles.adBanner} ${styles[size]} ${styles[position]} ${className}`}
      style={{
        width: adSize.width,
        height: adSize.height,
        maxWidth: '100%'
      }}
    >
      {!isLoaded ? (
        <div className={styles.loading}>
          <div className={styles.skeleton}></div>
        </div>
      ) : (
        <div className={styles.adContent}>
          {testAd ? (
            <TestAdContent size={size} />
          ) : (
            <div className={styles.realAd}>
              {/* –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ */}
              <div id={`ad-${size}-${Date.now()}`}></div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

// –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
const TestAdContent: React.FC<{ size: AdBannerProps['size'] }> = ({ size }) => {
  const medicalAds = {
    banner: {
      title: "üíä –ê–ø—Ç–µ–∫–∞ –æ–Ω–ª–∞–π–Ω",
      text: "–î–æ—Å—Ç–∞–≤–∫–∞ –ª—ñ–∫—ñ–≤ –¥–æ–¥–æ–º—É",
      cta: "–ó–∞–º–æ–≤–∏—Ç–∏"
    },
    rectangle: {
      title: "üè• –ü—Ä–∏–≤–∞—Ç–Ω–∞ –∫–ª—ñ–Ω—ñ–∫–∞",
      text: "–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞ –ª—ñ–∫—É–≤–∞–Ω–Ω—è\n–°—É—á–∞—Å–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
      cta: "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è"
    },
    leaderboard: {
      title: "ü©∫ –ú–µ–¥–∏—á–Ω–µ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è | –ó–∞—Ö–∏—Å—Ç—ñ—Ç—å —Å–≤–æ—î –∑–¥–æ—Ä–æ–≤'—è",
      text: "–ü–æ–≤–Ω–µ –º–µ–¥–∏—á–Ω–µ –ø–æ–∫—Ä–∏—Ç—Ç—è –¥–ª—è –≤—Å—ñ—î—ó —Ä–æ–¥–∏–Ω–∏",
      cta: "–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ"
    },
    native: {
      title: "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –ª—ñ–∫–∞—Ä—è–º–∏",
      text: "–í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω—ñ –≤—ñ—Ç–∞–º—ñ–Ω–∏ —Ç–∞ –¥–æ–±–∞–≤–∫–∏ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∑–¥–æ—Ä–æ–≤'—è",
      cta: "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥"
    },
    interstitial: {
      title: "üéØ –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è",
      text: "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –ª—ñ–∫–∞—Ä—è\n–ü—Ä–∏ –∑–∞–ø–∏—Å—ñ –Ω–∞ –º–µ–¥–∏—á–Ω–∏–π –æ–≥–ª—è–¥",
      cta: "–°–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é"
    }
  };

  const ad = medicalAds[size];

  return (
    <div className={styles.testAd}>
      <div className={styles.adLabel}>–†–µ–∫–ª–∞–º–∞</div>
      <div className={styles.adBody}>
        <h4 className={styles.adTitle}>{ad.title}</h4>
        <p className={styles.adText}>{ad.text}</p>
        <button className={styles.adCta}>{ad.cta}</button>
      </div>
    </div>
  );
};

export default AdBanner; 