import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { useUser } from '@/context/UserContext';
import { useNetworkStatus } from '@/hooks/useNetworkStatus';
import styles from './Navigation.module.scss';

// –ú–µ–º–æ—ñ–∑–æ–≤–∞–Ω–∞ —ñ–∫–æ–Ω–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –¥–ª—è –∫—Ä–∞—â–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
const NavIcon: React.FC<{ path: string; profile: any }> = React.memo(({ path, profile }) => {
  const iconMap: { [key: string]: string } = {
    '/': 'üè•',
    '/education': 'üìö', 
    '/medical-map': 'üó∫Ô∏è',
    '/calendar': 'üìÖ',
    '/profile': profile ? 'üë§' : '‚ú®'
  };
  
  return <span className={styles.navIcon}>{iconMap[path] || 'üè•'}</span>;
});

NavIcon.displayName = 'NavIcon';

// –•—É–∫ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é –∑ –¥–µ–±–∞—É–Ω—Å–æ–º
const useResponsive = () => {
  const [screenSize, setScreenSize] = useState({
    isMobile: false,
    isTablet: false,
    isTouch: false
  });

  useEffect(() => {
    const updateScreenSize = () => {
      const width = window.innerWidth;
      const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
      
      setScreenSize({
        isMobile: width <= 390,
        isTablet: width > 390 && width <= 768,
        isTouch: isTouchDevice
      });
    };

    // –î–µ–±–∞—É–Ω—Å –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    let timeoutId: NodeJS.Timeout;
    const debouncedUpdate = () => {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(updateScreenSize, 150);
    };

    updateScreenSize();
    window.addEventListener('resize', debouncedUpdate, { passive: true });
    window.addEventListener('orientationchange', debouncedUpdate, { passive: true });
    
    return () => {
      window.removeEventListener('resize', debouncedUpdate);
      window.removeEventListener('orientationchange', debouncedUpdate);
      clearTimeout(timeoutId);
    };
  }, []);

  return screenSize;
};

export const Navigation: React.FC = () => {
  const location = useLocation();
  const { state } = useUser();
  const { isMobile, isTablet, isTouch } = useResponsive();
  const { isOnline, effectiveType } = useNetworkStatus();
  const [isVisible, setIsVisible] = useState(true);
  const [lastScrollY, setLastScrollY] = useState(0);

  // –ú–µ–º–æ—ñ–∑–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
  const navItems = useMemo(() => [
    {
      path: '/',
      label: '–°–∫—Ä–∏–Ω—ñ–Ω–≥–∏',
      shortLabel: '–°–∫—Ä–∏–Ω.',
      fullLabel: 'üè• –°–∫—Ä–∏–Ω—ñ–Ω–≥–∏',
      priority: 1
    },
    {
      path: '/education', 
      label: '–û—Å–≤—ñ—Ç–∞',
      shortLabel: '–û—Å–≤—ñ—Ç–∞',
      fullLabel: 'üìö –û—Å–≤—ñ—Ç–∞',
      priority: 2
    },
    {
      path: '/medical-map',
      label: '–ö–∞—Ä—Ç–∞',
      shortLabel: '–ö–∞—Ä—Ç–∞', 
      fullLabel: 'üó∫Ô∏è –ö–∞—Ä—Ç–∞',
      priority: 3
    },
    {
      path: '/calendar',
      label: '–ö–∞–ª–µ–Ω–¥–∞—Ä',
      shortLabel: '–ö–∞–ª–µ–Ω.',
      fullLabel: 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä',
      priority: 4
    },
    {
      path: '/profile',
      label: state.profile ? '–ü—Ä–æ—Ñ—ñ–ª—å' : '–ü—Ä–æ—Ñ—ñ–ª—å',
      shortLabel: state.profile ? '–ü—Ä–æ—Ñ.' : '–ü—Ä–æ—Ñ.',
      fullLabel: state.profile ? 'üë§ –ü—Ä–æ—Ñ—ñ–ª—å' : '‚ú® –ü—Ä–æ—Ñ—ñ–ª—å',
      priority: 5,
      hasNotifications: state.profile && state.recommendations.length > 0,
      notificationCount: state.recommendations.length
    }
  ], [state.profile, state.recommendations.length]);

  // –ê–≤—Ç–æ–ø—Ä–∏—Ö—É–≤–∞–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ (—Ç—ñ–ª—å–∫–∏ –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö)
  useEffect(() => {
    if (!isMobile && !isTablet) return;

    const handleScroll = () => {
      const currentScrollY = window.scrollY;
      
      if (currentScrollY < 10) {
        setIsVisible(true);
      } else if (currentScrollY > lastScrollY && currentScrollY > 100) {
        setIsVisible(false); // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ –≤–Ω–∏–∑
      } else if (currentScrollY < lastScrollY - 10) {
        setIsVisible(true); // –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ –≤–≥–æ—Ä—É
      }
      
      setLastScrollY(currentScrollY);
    };

    const throttledScroll = throttle(handleScroll, 100);
    window.addEventListener('scroll', throttledScroll, { passive: true });
    
    return () => window.removeEventListener('scroll', throttledScroll);
  }, [lastScrollY, isMobile, isTablet]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
  const getNavText = useCallback((item: typeof navItems[0]) => {
    if (isMobile) return item.shortLabel;
    if (isTablet) return item.label; 
    return item.fullLabel;
  }, [isMobile, isTablet]);

  // –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—ñ–≤ –∑ haptic feedback
  const handleNavClick = useCallback((path: string) => {
    // Haptic feedback –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
    if ('vibrate' in navigator && isTouch) {
      navigator.vibrate(50);
    }
    
    // PWA —Å—Ç–∏–ª—å –ø–µ—Ä–µ—Ö–æ–¥—É
    if (path !== location.pathname) {
      document.startViewTransition?.(() => {
        // –ü–ª–∞–≤–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –¥–ª—è PWA
      });
    }
  }, [location.pathname, isTouch]);

  return (
    <nav 
      className={`${styles.navigation} ${!isVisible ? styles.hidden : ''} ${isTouch ? styles.touchOptimized : ''}`}
      role="navigation"
      aria-label="–ì–æ–ª–æ–≤–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è"
    >
      <div className={styles.container}>
        <div className={styles.navItems}>
          {navItems.map((item) => {
            const isActive = location.pathname === item.path;
            const shouldHighlight = item.path === '/profile' && !state.profile;
            
            return (
              <Link
                key={item.path}
                to={item.path}
                onClick={() => handleNavClick(item.path)}
                className={`${styles.navItem} ${isActive ? styles.active : ''} ${shouldHighlight ? styles.highlight : ''}`}
                aria-label={item.fullLabel}
                aria-current={isActive ? 'page' : undefined}
              >
                <NavIcon path={item.path} profile={state.profile} />
                <span className={styles.navLabel}>
                  {getNavText(item)}
                </span>
                
                {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–ø–æ–≤—ñ—â–µ–Ω—å */}
                {item.hasNotifications && item.notificationCount > 0 && (
                  <span 
                    className={styles.badge}
                    aria-label={`${item.notificationCount} —Å–ø–æ–≤—ñ—â–µ–Ω—å`}
                  >
                    {item.notificationCount > 99 ? '99+' : item.notificationCount}
                  </span>
                )}
                
                {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è screen readers */}
                {isActive && (
                  <span className={styles.srOnly} aria-hidden="true">
                    (–ø–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞)
                  </span>
                )}
              </Link>
            );
          })}
        </div>
        
        {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É */}
        <div 
          className={styles.networkStatus} 
          aria-label={isOnline ? `–û–Ω–ª–∞–π–Ω${effectiveType ? ` (${effectiveType})` : ''}` : '–û—Ñ–ª–∞–π–Ω'}
          title={isOnline ? `–û–Ω–ª–∞–π–Ω${effectiveType ? ` - ${effectiveType}` : ''}` : '–ù–µ–º–∞—î –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º'}
        />
      </div>
    </nav>
  );
};

// –£—Ç–∏–ª—ñ—Ç–∞ throttle –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
function throttle<T extends (...args: any[]) => void>(
  func: T,
  limit: number
): (...args: Parameters<T>) => void {
  let inThrottle: boolean;
  return function(this: any, ...args: Parameters<T>) {
    if (!inThrottle) {
      func.apply(this, args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  };
} 