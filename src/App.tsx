// eslint-disable-next-line @typescript-eslint/no-unused-vars
import React, { useState, useEffect } from 'react';
import { Routes, Route } from 'react-router-dom';
import { useScreening } from './context/ScreeningContext';
import { UserProvider, useUser } from './context/UserContext';
import { ScreeningFilters } from './components/organisms/ScreeningFilters/ScreeningFilters';
import { ScreeningCard } from './components/molecules/ScreeningCard/ScreeningCard';
import { ToastContainer } from './components/organisms/ToastContainer/ToastContainer';
import { ExportButton } from './components/molecules/ExportButton/ExportButton';
import { Navigation } from './components/molecules/Navigation/Navigation';
import { MedicalMapPage } from './pages/MedicalMapPage';
import { ProfilePage } from './pages/ProfilePage';
import { CalendarPage } from './pages/CalendarPage';
import { EducationPage } from './pages/EducationPage';
import { useToast } from './hooks/useToast';
import { Screening } from './types/screening';
import AdBanner from './components/atoms/AdBanner/AdBanner';
import styles from './App.module.scss';
import { Button } from './components/atoms/Button/Button';
import { Modal } from './components/organisms/Modal/Modal';
import { ErrorBoundary } from './components/atoms/ErrorBoundary/ErrorBoundary';

const LoadingSpinner = () => (
  <div className={styles.loading}>
    <div className={styles.spinner}></div>
    <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...</p>
  </div>
);

const ErrorMessage = ({ message }: { message: string }) => (
  <div className={styles.error}>
    <h2>–ü–æ–º–∏–ª–∫–∞</h2>
    <p>{message}</p>
  </div>
);

const ScreeningList = () => {
  const { state } = useScreening();
  const { state: userState, generateRecommendations } = useUser();
  const [selectedScreening, setSelectedScreening] = useState<Screening | null>(null);
  const { success } = useToast();

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é
  useEffect(() => {
    if (userState.profile && state.screenings.length > 0) {
      generateRecommendations(state.screenings);
    }
  }, [userState.profile, state.screenings]);

  const handleScreeningClick = (screening: Screening) => {
    setSelectedScreening(screening);
  };

  const closeModal = () => {
    setSelectedScreening(null);
  };

  const filteredScreenings = state.screenings.filter(screening => {
    const matchesSearch = screening.title.toLowerCase().includes(state.filters.searchQuery.toLowerCase()) ||
                         screening.description.toLowerCase().includes(state.filters.searchQuery.toLowerCase());
    const matchesCategory = state.filters.categories.length === 0 || 
                           state.filters.categories.includes(screening.category);
    const matchesAge = screening.ageRange[0] <= state.filters.ageRange[1] &&
                      screening.ageRange[1] >= state.filters.ageRange[0];
    const matchesGender = state.filters.gender === '–≤—Å—ñ' || 
                         screening.targetGender.includes(state.filters.gender as '—á–æ–ª–æ–≤—ñ—á–∏–π' | '–∂—ñ–Ω–æ—á–∏–π');

    return matchesSearch && matchesCategory && matchesAge && matchesGender;
  });

  return (
    <div className={styles.screeningList}>
      {/* –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø–∞–Ω–µ–ª—å –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏ */}
      {userState.profile && userState.recommendations.length > 0 && (
        <div className={styles.personalPanel}>
          <div className={styles.personalHeader}>
            <div className={styles.userInfo}>
              <span className={styles.userAvatar}>
                {userState.profile.gender === '—á–æ–ª–æ–≤—ñ—á–∏–π' ? 'üë®' : 'üë©'}
              </span>
              <div>
                <h3>–í—ñ—Ç–∞—î–º–æ, {userState.profile.name}!</h3>
                <p>–£ –≤–∞—Å —î {userState.recommendations.length} –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π</p>
              </div>
            </div>
            <Button
              variant="ghost"
              onClick={() => window.location.href = '/profile'}
              className={styles.profileButton}
            >
              –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å ‚Üí
            </Button>
          </div>
          
          <div className={styles.quickRecommendations}>
            {userState.recommendations.slice(0, 3).map((rec, index) => (
              <div key={index} className={`${styles.quickRec} ${styles[rec.priority]}`}>
                <div className={styles.recPriority}>
                  {rec.priority === '–≤–∏—Å–æ–∫–∞' && 'üî¥'}
                  {rec.priority === '—Å–µ—Ä–µ–¥–Ω—è' && 'üü°'}
                  {rec.priority === '–Ω–∏–∑—å–∫–∞' && 'üü¢'}
                  {rec.priority}
                </div>
                <h4>{rec.screening.title}</h4>
                <p>{rec.reason}</p>
                <span className={styles.recDate}>
                  –î–æ {new Date(rec.nextRecommendedDate).toLocaleDateString('uk-UA')}
                </span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –¢–æ–ø –±–∞–Ω–µ—Ä –ø—ñ—Å–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ */}
      <AdBanner size="leaderboard" position="top" />

      <div className={styles.header}>
        <div className={styles.headerContent}>
          <h1>ü©∫ –ú–µ–¥–∏—á–Ω—ñ —Å–∫—Ä–∏–Ω—ñ–Ω–≥–∏</h1>
          <p>–ó–Ω–∞–π–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ –º–µ–¥–∏—á–Ω—ñ –æ–±—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–ª—è –≤–∞—à–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è</p>
        </div>
        
        <div className={styles.headerActions}>
          <ExportButton 
            screenings={filteredScreenings}
            onExport={(format, count) => {
              success(`–î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ ${format.toUpperCase()}: ${count} —Å–∫—Ä–∏–Ω—ñ–Ω–≥—ñ–≤`);
            }}
          />
        </div>
      </div>

      <ScreeningFilters />

      <div className={styles.results}>
        <div className={styles.resultsHeader}>
          <h2>
            –ó–Ω–∞–π–¥–µ–Ω–æ {filteredScreenings.length} –∑ {state.screenings.length} —Å–∫—Ä–∏–Ω—ñ–Ω–≥—ñ–≤
          </h2>
        </div>

        <div className={styles.screeningGrid}>
          {filteredScreenings.map((screening, index) => (
            <React.Fragment key={screening.id}>
              <ScreeningCard
                screening={screening}
                onDetailsClick={handleScreeningClick}
              />
              {/* –ù–∞—Ç–∏–≤–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ 3-–≥–æ —Å–∫—Ä–∏–Ω—ñ–Ω–≥—É */}
              {(index + 1) % 3 === 0 && index < filteredScreenings.length - 1 && (
                <div className={styles.adSlot}>
                  <AdBanner size="native" />
                </div>
              )}
              {/* –ü—Ä—è–º–æ–∫—É—Ç–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ 6-–≥–æ —Å–∫—Ä–∏–Ω—ñ–Ω–≥—É */}
              {(index + 1) % 6 === 0 && index < filteredScreenings.length - 1 && (
                <div className={styles.adSlot}>
                  <AdBanner size="rectangle" />
                </div>
              )}
            </React.Fragment>
          ))}
        </div>
      </div>

      {/* –ù–∏–∂–Ω—ñ–π –±–∞–Ω–µ—Ä –ø–µ—Ä–µ–¥ —Ñ—É—Ç–µ—Ä–æ–º */}
      {filteredScreenings.length > 0 && (
        <AdBanner size="banner" position="bottom" />
      )}

      {selectedScreening && (
        <Modal onClose={closeModal}>
          <div className={styles.modalContent}>
            <div className={styles.modalHeader}>
              <h2>{selectedScreening.title}</h2>
              <button onClick={closeModal} className={styles.closeButton}>‚úï</button>
            </div>
            
            <div className={styles.modalBody}>
              <div className={styles.screeningDetails}>
                <div className={styles.detailSection}>
                  <h3>üìã –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
                  <p><strong>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</strong> {selectedScreening.category}</p>
                  <p><strong>–í—ñ–∫–æ–≤–∞ –≥—Ä—É–ø–∞:</strong> {selectedScreening.ageRange[0]}-{selectedScreening.ageRange[1]} —Ä–æ–∫—ñ–≤</p>
                  <p><strong>–¶—ñ–ª—å–æ–≤–∞ —Å—Ç–∞—Ç—å:</strong> {selectedScreening.targetGender.join(', ')}</p>
                  <p><strong>–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è:</strong> {selectedScreening.frequency}</p>
                </div>

                <div className={styles.detailSection}>
                  <h3>üìù –û–ø–∏—Å</h3>
                  <p>{selectedScreening.description}</p>
                </div>

                <div className={styles.detailSection}>
                  <h3>‚ö†Ô∏è –§–∞–∫—Ç–æ—Ä–∏ —Ä–∏–∑–∏–∫—É</h3>
                  <div className={styles.riskFactors}>
                    {selectedScreening.riskFactors.map((factor, index) => (
                      <span key={index} className={styles.riskFactor}>{factor}</span>
                    ))}
                  </div>
                </div>

                <div className={styles.detailSection}>
                  <h3>üéØ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞</h3>
                  <p>{selectedScreening.preparation}</p>
                </div>

                {/* –†–µ–∫–ª–∞–º–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ */}
                <div className={styles.modalAd}>
                  <AdBanner size="rectangle" />
                </div>
              </div>
            </div>
          </div>
        </Modal>
      )}
    </div>
  );
};

const AppContent = () => {
  const { state } = useScreening();
  const { toasts, removeToast } = useToast();

  if (state.loading) return <LoadingSpinner />;
  if (state.error) return <ErrorMessage message={state.error} />;

  return (
    <div className={styles.app}>
      <Navigation />
      <main>
        <Routes>
          <Route path="/" element={<ScreeningList />} />
          <Route path="/screenings" element={<ScreeningList />} />
          <Route path="/education" element={<EducationPage />} />
          <Route path="/medical-map" element={<MedicalMapPage />} />
          <Route path="/profile" element={<ProfilePage />} />
          <Route path="/calendar" element={<CalendarPage />} />
        </Routes>
      </main>
      <ToastContainer toasts={toasts} onRemoveToast={removeToast} />
    </div>
  );
};

const App = () => {
  return (
    <ErrorBoundary>
      <UserProvider>
        <AppContent />
      </UserProvider>
    </ErrorBoundary>
  );
};

export default App; 